%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: Project_Report_New.dvi
%%CreationDate: Sat Nov 05 12:45:22 2016
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMBX12 CMR12 CMTT12 CMSL12 CMSY10 CMMI12
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o Project_Report_New.ps
%+ Project_Report_New.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.11.05:1245
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /beta put
dup 17 /eta put
dup 58 /period put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427040DA3AAA0D1F59364B1D9
CC42791E2210FD68718C39BD2C28A79FB10BBBDA5654EC5CCDE37F190F408888
6F8E4988851F77B198EB8685EDCF5BFAAD88E7A914FBEEC22AF9721AE8908C75
860C8E3073A7C626BB2393A1C90AE7585D01D9477A7DAC80AF7C8244917DA635
EEFA010F61C8C07D844A7DC46DFC69EBFCFE58E0B246C615F8BC572DD635CA72
0FA9DCE50CD44F485912FF17B506D8ED9856E001A40291BB267B8678C2AB960A
F82F47CC252DC93432B85D6FE0AEF640CDB55A69C5F28219D8B0BC1154369D01
BA86CF1E1FF677C14F26EFBE5ADE5A06D34E81EB1A1EEE3D5E439D7D230990FE
C8EE3A7AE59C665C26C1F138A6C4B511F36710DA584130CC9F595D7285C6A98E
B2076DD75B3379E00BD2667F982E72355ECB9A92BD75FECB172D54622D215697
4838F662758A3E0E773E1051FCD98DF62BA3DDE24341CD0B712825A46A68EBF8
09FA27E16887F0A48CCD963987601A585B7718C732AFF5B65B2833EEF7522847
5782BBF8046588A655338FB07430257558A26D052E8167186ED641C802D7DBE1
B7139604CCF2AB77D64AECE1895BA60F8D37CEDEAFECFAD484F092FBE1B8EE0A
1346E90386B64BE9D9B81CFD58DD6477E82D0C9ABE9F11A6B5A28F31692E4B2E
1DC726A91FA3B3136BC0B63F31D2A4C584D546BAC09BC12458D3F2ECCDDE9708
3A9E20446FB47E678DD7A5D76EB1801122CFFE46934FCE636EB2A8CD2381BF06
B8DF8FB56EED80CAA17A2903FE0AD5CE49E7244395E436DE5070F1421E05F7BD
64255FF3E43AFF854BD97943F542B574C17D1CB62ABBC6908AD9CDA36A709517
DF459D8CA90419020D6995B9AC2708424BF594589449C6B0FF73A6DF565DB90E
C0E1CFFDE5AD39E253200B379EAFD27C9B9CE06D8C8B6ED33C9627272B533CC0
A58C066CF776AAC4D08588E34D27D28E733BE37812C987C9DAB8C51248D1CF7F
CDD7286DACCB4A8D360EE20BBDF69C74760AF52A4BCE66F903D053A7AC9E07ED
A7378DBB8A076A7A600841F3059C6F781A928DC1A52C40E3ED41C346662234A5
721A320D45E88B15D5D754AA9EB8248781E8C255C678D06FC2BDE22C8AC071EC
2814B235528D1481E1DD32F986AD2B11419CA117C7C38BA016B9BA119E448960
53B89A3B1EB59DFA388E4268564ED0B6A26E6EADFC47985806A2BC70DA5F8A6E
3F0A8E6E9385FF92F9B1679B3816A839F99BD96B912F2DE548EA23A2B5F20EFA
D796543DB3D06C2A4F0233721F7E31CF332B73807A77F8666AA02F9DC96F0712
BC8A4F89BA5B16403C3A404C62B63B19DEF971CCBF89FDE07E4244C8973849FD
71BF907BEF36530C9069743AD6796DEE5CFDD7D4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /backslash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D4669353E1273F51A39C279F1F8EAF073497C25
E79996A530100DD40A73BD980338303E192978236F8EC6BABBC8E4395F99C2EA
8DBA2BDD01AB2030BBB19C9AA104BB96A1A8BF9C25E29269E77E5D6805555B2F
05FAF95D67C87108293EF4BB90A5C2575E484537FB203249A03F54D324D3C4F6
62104C8286DB7C0FBEF9AB2A75D8A17CA5464B417FF0DC1501E40B6D9A226919
145F74A039B54E80023BFBB07B71967C420B23004C4CDF51A94DE0A2708C7957

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSL12
%!PS-AdobeFont-1.0: CMSL12 003.002
%%Title: CMSL12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSL12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSL12 known{/CMSL12 findfont dup/UniqueID known{dup
/UniqueID get 5000799 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSL12 def
/FontBBox {-56 -251 1102 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSL12.) readonly def
/FullName (CMSL12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA6FC9E3601557F569CC
CFC761B28B4750D2A423A53BC817DD95810FDF74E65D5CBB288AD66070D5D973
6462F9C95D84037314739746915653EE5887CA0572047BBBD3DEECEF76600331
5D2DA112178478425DC12EDC0B976D49B8C80DCECC1D51AF792E83ABB175B53E
DB9B5CC7CF4972AA648AE0E19FC4ACA4607F68CF4A114979B6A955C17B33A890
058BD143B7C3709A107F6C827F535D564D849551A65C1E33D86EBDE6F87ACB34
AA1082FCBD1C7492428A70603B423BF59B2DAB39A3162D6D4F55F35317B4267A
BC52759E5156F935F0B0275E223FD1844D9CBC33CD132B3BEF6B5935A3F8CD94
C7DEDA448444BF4D97D607FCD68BB3110A9DAE0A0121A1D381E3C2C5423A74D8
D6B440F265AA67EF8FC86558A71D7D5F96ECAD065289818CA6EC136EFB0BD0C7
11C3FD7E4605ED6B9573C94E1B87A74BA1B4872C505D72DABB0E98603D183F77
7704A5904731E35C4B4154B5BFD135CF352B6AD27E58E8900572809DA3AEF546
55E7F1E95BC7024145BBF4581FC51DECFFE3D2E8E22B0FDFC4F62AA7008C45D5
076714AB5EE481E26A36C71BB02D27F76E2E42ABBF72C36F4F06CEEC104C7B31
0A89A876B2FE053A5E84F1BDCA907A0FC7FC542E1C979D130359451BD23E992F
1F9E5E18E977F773B7656F9989B21B53FC7BDBA81B9AD8AA4FF8CC915669BFAE
238741192230685FF05466C3802070A7DBCEF2F529B3F66AEFF9B37EC629CF73
62252C28483C3205ADBC9F5AC6931C9774E1043AEAB7E00EFA43F41A914F6F5C
D6B195B408741D2A6AB55719DDEED7D7E1E9E105216D1E6CED2910F370328FA6
5A1A44D551CD3AD6FCD20E86E31206C410ECF6B5828B2FCAA9AA49AA152AEEE2
247EB4CD920720B92A6D13954FDBB8188067D3CF9C27CB180732F45D50451369
87B8A268374A5301C7ED828C886A8F709CCB99F786E1DBDEC1F1766C82DFFD7A
61B5D5E381DBBEE0012B837BD0CF7FD8A0B206BAFC416205EE3E5C7C993D7573
E49E79544256F8F3E3E3C1F837D436E53471D72D0A70FBF0BACD151FEB4DA15F
0FE86F854286C934CF732ED6ABBF95E1D37B35938C1C7E1DB76E5A9ECD3BA934
107758EABBFB76974A49AB893937409C0F1DAD8408376905B2E4561DB43DCF8E
1FA549040E15C515807E512DCDF0F8DD98E97ACB6D6239289C2281327389AAF5
6E67FBF714F8FDD14873D77E8FDCD7F8DE4EE2E95B620BFEFA266DFE5876E1BD
C56F82A3EE20FFA2FA0619D8581A3A4F1F00C2EE711142E8CE50623428326701
46BDB2E8AA10D95E25225C9F461EF374606B0758BDDEE8C51134DD59C2B51E4C
A057FB647F220CA706DE74CBDD444DC31C4CE36C6CB81D220D0C25201A8D68C2
471401F0F528D9C87825150F827582BF381BFFC201F55237A9B7FA7AC7A0A2F3
906DFBAAD96C1E2384DCCDA2E841F9A3836575705F5E06C7A611EF895E3E3022
4A3090253D08B9390837189246CE711EE6783381B5B5D48C30628A626B3BC56E
F92270E927A4325CFD38F11A1BB43B7F42B4BD7BB39398D7FD84B0E505F40C3F
436A258A8B2A194540EC7FB46BEA533816D54CA4D99BE659A8267FC2975CA4BA
C9DC61B6E038F73FA9172D6AD3C8CC98D75ED4148AD27F8134356FB0BDAA2FBC
C34AFF2E3691331B42715E942E64314F521B6263D8CB22EBFE329C1DAA76D51E
760903E00B79720EBAEBD7694209BB5F33149BABD9CB6009BACECA9AE6E636DF
0B345EEFAF430038FC58CB7FE388DB2BD11E9DC02390D158F294B18C8D7A8D94
120AF0450FF8EFAB4F84C42476BB850D77D6B92BFAAA530BEFE132F84DB9A232
25AF17BB04826BDA35238741007CFD5A81B44CFB90A7D87DFD579D35F6CDC25C
60E8BDC0F1064A65BBEC3573BD008B68ADC5C5A317E3F4131CC66582167C39D8
C1EF065355DBD2A5C0630C17817926B053C269711CE836E5511D6D2DF0A721C3
82D1D12E5F189BB57F30CC69D2CA83E994677F31EB915A7E4E76D925ABDE2431
1BB10B126F79F9D9A9F58F22ABCA471C8A42970B2404E27BB229023EF3D07BEF
5F43D5F8C357B044A9963D8BC8734482B58FBB65C81A0360C7EC21DE0D73DC1E
F204DE5FB7B6156CADC48E57A551EE422FA944045E521B4D9F04EBB7FFEEAB27
9B7C10CE484EDFEA74AF2B5EE049DB1EF6FC39CB28788DCB07C708720B98B485
5FDA1B880AEADD781196DFC03AEF43353763E6D75392E7FCB7458E3021383DD8
BF7F6F0FA663DDD2AAEB93387B50E31EB428022AABA8F4668FEE41606DAA785B
233E2F642FF77ED4E716AD7C8761A9243F7908353C95B4EF0D80200C9468D21F
2B5B6665AF18ADEBB6AAB668FD7572989EB98A7619721F15BA36EA9C221BF205
03CA15D4E1053CCCF10B5B8C3FB81A4CCC28621309D9538EC53D32405110C85C
E2C53DEB0D354CA617FD7A70B44A3DD0C47640A011C06053CE347AF300AC86B3
A6ABFA3EF772F15562B26B87070D98FA1838DE6C0B6729EC18F8080E6A622588
007B116D78D87231647AF137E54E3190AA6835E291633FF7FEE8CF79207E33D7
9D76C49E5A9F2C4C71D47A7C40F0DF6A38794CDAAB6B77FEF323AB18F26E4F33
A7DEBEFD61CCEC5EAACF37A09D66D14E35076D9E756889AD81A3332265C54B44
7D25A254955E783632D216824FBA25A630F10524E39EB1801297D766492AC6EA
AD5D3C0EB84C166661620BF0226DF87AE0EA07072D7A0C1CC356A9C54FE04F80
7A50A461545107FF9A4472E55EFA0F46D4C2E9901D390E19643CD7B3E3E03475
DD9E1C049FD5996AC79713C5C6FFC708EA1E960BAFCE653DE3A8CA8D0DA3D887
9CD55049FAC13DB435B4AB167AC93F1DAB226EBF4758293A71810323B17EE63A
9312CE01184300F5888E71E6645B87970CA316BC191BD7CE1C4032C9ACEE233A
D50BE3E8DABB7CBEB5E8A77EC5F57074401CC7A0A8357D5545CAB47FD2FE07A2
EFA7BB07EA5618806D42E79044D1943C405F9327F73654DC583741159D44A95A
EDD6170E088550DE606ADFAA5A87B83BEB8B0B1572D70E77C1735037348B4C9A
74FAD29726835A282F6B739FD0EB4CF125084882CE172E307E33197566773EC8
6878AA666BD92ECAD406A99AEA79C99DC67198818BEA622264D5BA51979C6365
596A5420002C6FA38B2F6FE64236F0F1820E3D52608C8E507A4D1688E35BDD82
7AE4D0B63BB552C498BC705ADE2A9E35A9771DC44690D2AF6C246BCBE3C955B8
1C5B725D02CEF914610DF984BBE9D5D748836051BE1C666EDB7E512CAD5DE61E
B69BFEEBCC12D366285B9D2C930B4282801926526D416A320DEDB33C63084452
6181582CA10104154E474709518B40BA2EA15E5EAEB53C8F6006DBF21932C04E
6C55E6E51BBC1011B2359EA5941CD969DF22EB164CA69B75CC376D9611FB2DBF
160ACDDE5A8B190DB789D0F08BE737395EB62D5501B5509A58A1A839D9F2ACD9
76778250647EBE89F320DC73459858826AA245639DE9EE82B97CBB7D410CC8DF
83378DA0E727DA0CB4F2FD410EA44871EE4E96658ACF30501A9432E4031163E1
910D2D4C9BCF733D48CC33D80F8D45BC7D84751D27A2E1886EC020994AD0663B
542298D5D0511A6B3F423A50E2E7BF10D4043530757F1AD411005D77F9C99E95
28C8FA7CEAFF8A4149FA3B0FD4E20154A07934DE683E45A43F118906A0FDA858
0BBAC329C5E4424BD60774F9FD08C540A30C71819659370DBD95BDD723DCFD95
93E44149906F0114F2F99D50F746C3468E4AE46136874E12324A5DC815AAD4F2
3B31D4561FE41E9843902F8C1C2DDCAB35C5C64B9730931326EBAA9013478CC7
BF523FD935EB2B54FF6C901ECFC15E46F4FE94253A8356FCF6AEA4A74FDA1B50
82D5A4239A5DA40F09C5A3B41F73BC904EC8B8CB49A279F949FB9D0D8FD4F2C1
B2049C639AB678A707CB8CED64AA66D0B8CECDE0686AD1BEC240F690A1739237
747F7FC826EA95BD23D104A7C21F47321EC4EA094EB63F1A0E4601EEAADEB814
9843772239B97CF2DA9327B98D7077B5904264077D48B5FF68EE59BD8EC665F1
95D4ACB2579F4A767102774C4DF660138C1E55345ABC9B44C2AF16CFD6F0CDA2
D47BA3F5B27429847258EAD91F3914C05ABB6E6858F45678AB6D7C7639863504
83D42888BFACE3C48FC5403C6CAFC70B807572209BA3E8CEFC05D54E1064805D
5A47FAFDBBBBB1E10B84549109484F0B95BC11F971BFCACB2AF2C84518A7D160
06209932EA930E7CA81EB0637D47C07088467437CF728DA22160601E071A15DD
DB1EBAB289549324FCF9AD557C3A28CB34FC216830986B083289569DB95DD071
CDAF6F046A3733A8861685286B0592AB5421E4203E8729E08BEF6A0E1E9B0E61
EF59088ED171B3399612C901A82E7A32FB74D5DB06C2CC0CB8414A574F625659
DCF9BEB406171C62EF196E355E5C421B3DD3DC2382212AC5AEFBD25CB32F7EB9
8AF6254AE97BA8C0DA5C68F5F4C98C9CD39ADC6C875C071A371B52CB8800728D
EC78B4A729863E578C29D9D77555D7ADCCFB98B83859B355F51C93618D0EC32C
8A7325DCE6C9434DD7B0E4691F888D7AA3DEF3F383AFD86B89F87D0557655C01
69B8DCE46C146BDD9C1A8A06503B9094E7C29787633F38CAA8BBC493D6A04C0D
9ABA0BC59FFBC4BFEA69B932E52FA97702BCF7F1CD1F78FE7FADE9458ED402EE
E397925C13CB90AADCD5E7BEEB560E838AB15F4D26B7F1B82B92E316036F6439
F424D9B4F9A6E3279CED301549C2C37BEA0066EBAB5DA8B7A669A4A63DBE60AE
CF340C8468A2C66D95AEFF92ED8CCFB6883217B32AF64F1AA15E8D46041D77D2
5473103C8481F597A1BC94CCEDC4795A7F9EAEE43860D1662223B4904701E900
3BC518DAE583CE042E83580B6D58557BD428A379203763BE6198348158F856B6
7CA535D6D2D9671D98DB0BDA90BCF33CDFFA60EC9917626183FD6AC32FE86E15
80D216E1DF9D6A7BCEE537DC73D6375C017BF827D4FF722B8DEF70B0590B4445
A6035B695F244557138DE94771F8F9E5290336B90FD704DB536C544EC859F6F0
F1BDCE156D5D0B42FF4D18BB05085EF160CAE11DBDD86E016A2FD66E08FC9431
E8875A986D33803829C1F30C180D7A7703DB7A3BCC8787F911B0D0AA4CA85728
3336635756CA80BC6C9785EAFED63F6D6B527E5E7AE23FC4CC1ECC7E2489E4C4
38A4FAC3B2056E692CFEB012EB6EE2BBC35F188FAC830471BB14C5F93E98A88A
4274F163C982328FB743A0FEE49048B92B41E3FC0940DCB637229BE2E4544A4F
DCD5A4048E6F058C526B19C3B9540875A943500356501A77E8AAFFB6F54674AB
6E8701FA68569F5D954272A531C922A85CECC2D6EBF86E98979D33EEB903EC68
ABFE8DED969E9675661D05DB80FEAE7ECFBB376BF51FCADA6ADF96BF30F4845A
30071F0CC2A007F969D76EA0660DB9EF8887EAFB1E4B788B54705BD6336EA37F
B4FD595E014968D8AC113E79AEA3A31455ADDA93C2A545C03ED97EA41388C3A2
DB27D3CEC105162A1EA6DBDC963F1B4162F516465FA3A7BB5EF08590C9038622
D306F2CA0491180208356063F4F0A44AA30AF6DB48B2AE91380FDE6CD37C1624
D5BBBE0EF671A951C09830213054F95F37B50075D87A7F0C47BD18816ECB1E77
7891D3714F2D16900AC1A9F2B0405EB4F89931F52A15B6DBCC55B56888A21FE4
974F34C0E57B0C8B26ABF46CA3C0360D0BFE16020F92ED46465A6E22A3D1D383
0BE9403DCC37BA669EECDFB43514D8529EE142AB4E2E42FD89DC1877EC3D20E0
B8B97238E117B11518DBEAE21350EA8D0CC609305EF416980CA1624B3CC3C5BE
A35BAF90418474B2BA1D0AA302519F0277552479CD3770F043834A098E47EA8C
29AC3C06850F42D423828B2E764D59138F39C3EC29CCCAFD78890134D552E35F
13B4E87E5C8C9BAF462B8C6989CAF05921C78148AC4BB6D3AC42ED88FA497255
C7A6CE3DAC227A54397C711A8C5325CA62F6EC9D4C4B76AD8E24E4510A701497
43A5A83E868A125BBAD0698500C94F4936608C7055ACB8CCBC32D38E5E1D88B4
8BC4020C1A76FD2325243FBB89DA82BAA70B64E2E56F1B045A07938354A70F05
7E535BCB5148D3A2A26E23E4ACD9655DF7B95B963D50560FEDD6490C70A3AA27
358A5BA7B62885B6B607CF805AE0A4FFFD437D81B00DECCAE69D08DDC76B4229
A1407F95D579FC47A70B17D24F55C294A1CF7CEA505BFF7F4F493C8FE816D64E
7711902C363D6F7C6C8D4AC6198F4549CBD8C8474CE00E23A96228DDA73865BA
9C3964AFD46A5B8A711FBEE4A00A7A05417BC221307BE092E3388D8B36130806
28751251F1AE64086094833ED2E42BAB5D7DAD65E2B4A6714811579D4284F399
86B30C3DF3D19EA72BB03FAD4E62DB6AA50C9C81A540315A8D43705CD71F2339
C2E8FF0EAE46CB3E5B6572CD886853A4A64C00C35102C2A73C96CB519540E822
4617C2D1C05783F95F3221719BFBBFBBD3AE247A9D8A8199229DA382EA818984
455214A47E556A4208368F4272B6BE012F36B246B814BB0FB6FB066598AD748C
014725B3D129A9899BF62441F7D8514E2D966DA6B5D5E37A92745752BD886871
C74B42BF0962F537757F4F34AC3036314AE1B275EC3B34696BF1D6A8699D2A62
7797C2FD7A9BB8140692304AE0B970BAC628124F82C9C06D3654B39157EEDAD3
1139A7AA988D1FE4C90C8858A5C9A5554F08992D4D51235EAAD5D4A5D7D20FA5
BB2AFB1D136D92D9FCAEE80B36DC68FECDF28B32A32E2E94224CB6D71F1294B3
731BC9E13684DAE767662FA97F2D709FC0F90FBC96F2C42CA629813392EFA358
BDA0FE8E71B6347421A18172C1DECC3ECAD10E3E3E270CCB99FB69CA1EB60ED0
D20A5B9B05F375DF013351340549EE59561F1D0E5408D1A319D670DBDC673961
A55B0DC6C51FBB3E388AD1F73A0C65BEDABD3E3823D14F01AD828593ADD224B6
5B8BB8A92F94D94516F4F5834ABC645B9B82526B65C4585338EBC272F5510405
6B8F3B0FE5D527849DA313BEDBCC5C49E8ACC7EBB41EC82FE8F6523561053327
5A2EE48A09B54A1F52B9B26104534BCA0155E045AB7C4DAF564FD2D05D0D6960
0924C8D906E856C4592827E9C79ACA063BB40121B8ACADEF87E98EEAC90B23DD
081FF70782D8C6DD73E262CFB8956CD35A2921D97F5C38F94CB0801C05B003B8
B64EAECDB4C09C187AF80C792F0EF9C2D7C64D2EF33400F90F5110C822AA441E
A813983CFE3438D7DD0AB28EF3B8D4C95D49302E92A356684189B4A415283004
4C740845722E468ED6E601860FEE3803614EDC7CDFC4B404510A4AC2C5DD89A8
1275B5D7B2E5A586FBB0C061E708F92C1552F64A29685D683D60498363CA3476
6751A9B4A5A2969E117FEF584DEF3A836900BA9B4A3D43F21FFB573B371B3D1A
074B352754015F7D7192024F404574177FC7233530462FC394D63E924FE1E460
FF0C9094EEC2807A69A8F106FB6DD07DFEF15FFEA2C4985D37CB02E1C6B4E1B6
FBB5230D1FE4078416F8C4E174138050946D10274FA40253B179261543D6A6B8
49F364AFD015FF45843FE7B5DDA23741A6B850E66BF94BF33528AD0ECF36C30F
76ADEB971CA1A3990ACBAC07B5CD01E16C99C139BFD6E2CDC9D3BBE5694204AE
85AE3E26F0DB3B181CAF04E8DB2C1D5FC3CEEC3CACED14896DE0F6FA10665197
E939AAC716BA68E409E90FE9A484A1109F2EBC5EF7908D61DC74210C779718E1
2179D360234E5B8B2CDF5B0D0FB1E570389672933EA7C28B31822AA9DC74A4F3
4B67CDFA987C6CF164C2564BD1502C3042FC860D2A57D3702D31876A1CFCE58D
619A66DF8CCC311631985E85BFE8588C946F09DABCCD5FE74AC5D873DD414387
2F2BB2200367B4FB6C70615176F41A8DB91E6145EDBF0CEF41E2E467ED1518D8
2B08130625B70FFA7E2C3F2A4E5099310672F072B8C476C66585599E61A9BC66
034E5810BC32C823B819EB39A15C0F25BE8D484F17D6CBB30775DC75B1276EAB
A9C364A37169F327C8B3240023605ED2F848E848B88111EE5C79A768E430A868
D4872655A2BD4F485C7FBBFC1A88E17F17F9763554823377B7A5001036A96F08
F6F5F52C89AB57FF970F954BEAA33A81A5EE85EE1C04FDBAE5E310128134EA44
703A4C0C1BBD2805995EFD87CD171075FD0CF00D51D717151ABD41792746E634
AC4CBA3CE41532FFEEAE627B2434CCF6E64A94BE076081B16CA12BBC5302978B
DBA063C52E8210D675950A53BFD454BC85B68C883D7ADB25A27EBFA924A38256
FAC25693915DAEB8D21777301F4ED227141AC72EE0961709AACB296914A438C3
B90F1C92137FDF9D8C5EF51B77280A08D8AF8CB30067EE12B0152FF5D7568CB7
4DC86AB40E88C65CF7105E25B41B2D99A08915DFA001511649718A0AAEA82A7C
3D24264549F25475AD9EB2E542B139F70BA89097F82D98A4F5DB4BEB90D652F8
856469E1A8F6BC06F6D45529BCD442A02A77104470566B285C863FFB311D4C68
EAD5486FE22FC7EFDC31AC5FBFF2E8353F6BE23BE25C134B278108E45BFA3B72
9C9840A0DDDAB001B9C71314BE16335A9B11BD3C831A355A560F6140BCB2BC28
21976BE1522536404095CED1D4D1B02486C467C20DF0D6A393320F6E0D4D086B
0D7F37DC7B2C7971DC405D8F56F4A5A4C79D4F8166D2D4C545BC36DEFE9C7E8F
A7C1BB8209A24908B5A1BB3C234B49CC96DE86FE0AFF2403CC38A27222803D65
E1E4F84D8335EA4182568C3862F90661D73506A7EA78266421827FE978388E33
770759F1486E988D6D5F82D739E0025DC97A70F69513C96673A7F35806C9D29F
B05CC681EA21FDE7D907A19783F3D90AF68E07D61B4EC68E118F3DA4514E2277
96A87623DE301FE43DF3D151ACF0C4CA631974F4F63E42117FC763C57AD95D6B
9F5EDDAD26E05AE7056D1627FD88E94881B239B08D4B65AF242A9C4D4326841E
8C002B0DDDD64759412AD6BE7B6F60AFD265BE389B62151E4DB4FC8A8379F019
839F89B01310A65741F22586337504BD87723B0FF3B624780ED9945C951CA395
231FA4D6C82D7A39238E443F6BCF1972F5162A8111D23DCE1C2689CACAAD6F38
8BA1D163E2FD8E436BC230D79F3108CF7F36BE2D08A8E9693F073A088491EE8F
5802DD53C6E91F54EE3EE7745D6460F946E6A1774403EDFEF1997AD880BD6F24
01BA5899A63BA7511C31025C98A191D59B7AF7077FC56B19424341986C3CE3B5
464164974CE76273B0B37463C99021E458845F8B9BA3D13015D56B670D197B04
CD7D42CB305802C6BEB5D259FE1884F2C3D8B51635EB5074341A976A45A04C63
4B0162B0FF4369726C80A264ED657CD0F77D67686479CC62C0B3E5871CBED870
00319A670D2C9A176BD62FC2D512E55EDF6974763CCEEF961B138E6387416663
8ADCFB41113DE6523F9E660D2C07AC303BEFEE65C5E3AEC39285353F1AFDB482
8A3932D1C9CD36FADA850F3EAA4C919AE7B98EAC178225E5D66678AFD6FE3FBB
2C9B59012052443E4C68CC421537CA1858888B5A7E0727F8CFB7173B1FB45BB9
BAD6F83382EA0A2A5ADA7C0324A8FC460836208F911CD1957113B8C5729409CE
2796FDC3B7505BFAC4CECA9B084CEADEFCD37AD009304A55EA00E0E6D5CC6156
60F9CE48C933F0A52E8BEE2890A64B0462942382917333CFC36CA65636275DB8
CEC7386E936583E88559B4A24A8AE718CCD95878C6E0E3B6042D910E62237DB0
80FC3D08864FD9323C38FD25872751A53E6AEEADD7BCA2E2033FAEC4E04F46EB
CDB57CBC0408D93E75E04B346778C08BDD6445E871C5CE5A09549721095188BF
0691F4F0C21CD23A36CC3691FB775A7B6A431D608E437B247045EA0E87FA6106
C841215162490FA9CB4972B7FA340F82F0E079F1C7B356FED16931C471FB91C6
5ADACF6AB14239412F0C40A4D0B524FE60FD334911443FF50617023C5953B25F
5C7FC86E53B3863A5654B2152BE17CB65D8E5778726D4712375E7C59DC48FBE1
2022A10F75074BF352FAD552EB542D311BD2A165788297BCD6E2724FE023034B
CDAA707890BC23798A98247EB37F87488677C83F31CE177B3D333285D07936F7
E757FD9A6E6FF5903C95933446C391444CCF166E12D17613026267C7084DBECA
BB88A5A17EDBD2FF2C9C071A73211845940DAA4D54BE54802D80655927798C3E
06F9C234190AC957B173545BFC4D3C603EDCD83C01F58D816B72E8EC9369963B
B2F08E77F29E5B63ECEB2F8BC1AEA298714C96F6806D9816FF07674BB09BC1F7
7DCF3C1F3C8F13B8B3916802DE8F6C3F8ABBA9AE17CBE862B1DC8D625F7B6A84
36D12B067F63C1D6F92878EF4CE8E6EB3931B48E84E512C2D1E8BA440DD547D4
A1C82DB586F98C8F2F0E3E8AB6084D17AADC7A2718656D77D6293C9841882EE9
B3545996C1F2BAD5362EDC14747D1B28CAE781E591B12E8B16B206AAC24D7FA2
D94BF82EDED84046AE42B4DF01CD70FAEEC980FF95A2083856A5D264E04D3608
79760E6E7AF5B03A60A618F19FD1770097D7E6384F03CFFF560A75F12D9C072F
B78A2871147A4A7DCB77506385F10CBB9BB492A0A2F3FDC15617620BD90A80B0
D81D5389382C4B7A0C5FD597E14859B9C02CD70A9385881A5742C3344C944B89
055CCE050829828DD44C83DFBEAFC04B7203F8DC27CBBFACF3783E08913CE5B3
3EBDD95ACB5D914DAC9CD8A7A770CA04EB5A282B5C32C3E5434FCB759C642D64
11C5F333DCB838F77844E87861EB2BCCBDC7250037816DB86AC597F9BA44A053
71E7ACBF7B7A615237DC03B0A172803F5BEA73ABCC8C5473DDD1F858F4B5EF74
D4E1A8DA705E05FC3C86D76B08FFAE8836CE9D1CDC94C03E26E024C0E1EB209E
F3E87CFAA7C2B06249DAFCD451B468466C474B7449D8009B3D87D58D00D95DF4
2166A03EB210C9E1225CAC6AE505B67CA0D48B0BFFDA036B6681E403A1E429C4
DB56553B3635D6A004BF9238FB930C4D11D3B231279A0E5C06D5D6F2F99614E2
CE7EC90EE8D58C5924E59772F964309576F94BFD3B09FFC6A36506DF9A17F50B
52595E459C2974A957B5C025EBE1796972991C8A1B46FAFEA41A91B6CA81D56A
938EEC7EB4A93004922C7BAC47519DC00384993C3F09EBC15F22EFE2EE818B2C
DAD377D403DDB233D6C7C7A8DAD6C01A5C8B22FA88B58346351C374F6F59669F
5E96D2DFB5737C06E95EFE3A4A617C82A4B5B7F4569FEF2AAE225EE0A7FBD63F
CCCB46472255A6DA9384DFD3E7F899C3D049BB4DBDCE2156D0602655483140F7
AA6E4EC478288A274679A154024B7A1B1D10440F686D1231FC6C1C51E8192258
96CA25CE96CD5CDD217EDC06D798ABBF7DB81058E7DFE268AA326D964A5193B9
12DB1C1A5353F767840262B5F36B4C6E42F49016B42A0129CB4CB6C97FA5EF39
CCBC1548C4638F538EC58F3DAD62FAD6BA004B41CBFFD040B85E37B03426312B
9D73FBD45F0E1587E52B9BDC4149F7700F1AC4D9591875B4780F6C1BB495917B
FD71F425D72942C258ECC9E38881FC267D819F0DC021D44F79C2C8CEA5D25136
FCBB14C584F15A93BF8A6C19203C085047B5289CA4000230BD5F7CCD0016F218
A86161868864A265015DCE4B21CE98F3AE4019314603E125BBDE9C986BD1AC80
FE6C577A3D00C6D403C2956C9365603570B892FF4824C896100987B2F62ED5CB
96CC777398DE79AF2A429F5B2DDC733B708E1DDCB3DC1A49B67F65C1AA3726CF
3C60E5A7E0834D4276948F1CB7390001864B2A06B4163606E06129DB1839C380
FD7E7030F4474E2B90CC7E54CAB40D408D90F474BB55E337C3EDBD8B45B69A24
E8BABDD72CD14688A93B58DD239E9E1F368347EE5A048CE682B24D9B859D188D
457B8BF18F085EFAA2846032922C59E811F6C4E0E5EC25AB11042E532052451B
E8695EB698F0E64E19C1BCF65585A09A4F97D3993ADD1DF66229F3EE59234595
7F3D9AB3ADBF4ADD160D6D0F22627A62917FF4DBC66F98387486A4A6FFF7F4BE
7596B462C32E09C6415B2571B865B6D5B33E8AD25BC74B98AAF3D8F0436B861A
EC45E58660D9D20DFBBB7434861BA07F6C8AB7C312BFCF1C7D8A6D5924F36993
8063A1B2992A7A5BEDD03EFC3C87CCB37880558165BAED906A87A9020E4513D6
5C60FEFCE90D72D6828BBBE8451D51783A51198028FF2CE1210F0687BEF55E27
E778C959B72E811EE7717D7F3AD879684B56D8A7614D60F2AF7D3CE717B41239
AFD67C5D0C3EE4DBF523721EADB0A377FFB120CD071E101AFF075D5F84A1AE71
B74C8C917F86BB4C2867174D171B0791B5E16735E1A54F528ED8877ADAEEF707
F7A99303FFE646B02CBCDFFAE4399B444AA23ED2F9C4CA214E295770206B7062
BB153D473BD13BD02014327860B565DAD614232EC191C9A876FFE110DA52EAD1
7196F85731B456AE161AF70D875002FD00CC75209E9D76BF7AF2E4FF0EEC0808
E5AFB97BAF4D138B58BD81E297298427A0A7A59CA1CE98983B260B887CE0DAC6
28E51EAFD78B89D1D7608E4A051E0D811AD4BD7626F36C56FA5D83A0D2A8ADA0
D76DFCA0B91DDCCFFB1265E6609B4826A825A87951399CD0823ACF60BABB11A1
6C25098000E6E23570B174E1DB49B67DE6FD608747CD92C6760AF83E647C32F7
2C8A5755169FBE326C4F564B2C0F9C692A7A9E78462482829376BEC979A69B57
BBA1CE92217E9B8B09DFD7D28274559FBB488FF65C3B264B9D33E659C4CE7DE7
4F2852392807A150F52A429510F808A223B215A9B86324EE037073A0D1161AC7
73C6AC3FF0C190C4D4EB0F067C2E3040ECD2D2B5ACECA423EA97F42FAC5153F2
71255ED9B996E0FA11EDCCC12C5B53A0D89EA72C28473579ABC71A98C4E48D44
47C1F0961EBE3BA532116089B8F46B5ECE1891489D78DFCC3987E4CF4CB4D0AB
D62F84D4BD6D8585CB054196BE860BCFC54F567DB19E1796198FF58BC749049D
CE86ACA0DDEB0A899E7223217F70334C2DDC3E19E747FD0D9EBC46244FA67E7B
DF4C3AEF63EF4D0CAC88C5B58129B6E17608A67E5357A5467DC5BC443B581739
642D5863901DE430C11BA2C99278B696EC7490B7A8EBA4AE4AB2853B667E5BCE
7131477C52799ADB75B1C4568CB672FB1481500B8C43CFC543FD4A7AE804781F
B0D3361F1D8F784127A7588187370090BB078C164EECC50558D3E4051F6014AA
7364E74EA8B6258EB1AEA4C2A381B4E5FAA4B4F1FC65A13150D422655FA79860
C1C2C5C6B2F03806CDE17D1C1F5C1D119356CE54D7FBB830D2C39E95D6E3B847
BA11AA2C512EB00B2C1CC908F89C30E2C0A388BD5BBF788F685A7D192F3E194B
9F62BBC0011AB45756D40874A8D50DD8A85AB1CC7378E383A85741C1D371CA73
10D5EB2BAA98D71DD5A64DF2CA7DA57A1C7A1DA8DF7FD8E3A2D23929E21A8587
541F5DF97E4DD93A5078B27904C1DD28819B10C8FE0F60CC119C155C65B3E668
82554886745804D2D23BB6390BD58F64954EC90C3454E5F75BA245D232DB68E9
101D735ED9D265749C010F615DE54F40F8219EB36451711795F3336B2EA0F430
D9E51C987C41B2BE19FFAF031DCFB393C46160777C9FD2148B65E25911024636
C61B73240D5B7867B570B64C80C9134B74E5F8CC9C3807C5D7A6CB8C60CEE619
52AD5EC57A33981EF1C63DFE01C4BF1A7B5954D2E8DF7FAD1F25C452C81B91DD
CE0CA3E5360F3ED84F967C01FF91924101CA521C06363803F1D24AEF656B1803
ABA940D1CEC9AB9D0E0FFF7E38B10D131B3B5844CB558EF17B1EBA2B69D44300
B908F8D6A15AF8E927BB0B4A441EB211D5D368E6A48075B668248138126A91C4
7ACBDA9AE36FE1391A20FAE06D2DDF2DD90379F28200045AD8819A92432D5F20
FB3DDD2C20EBA7D6B6348C0FBC62B5A2F5402311D0180C1940CBF247A94FBE0E
7B7FC952187BB954079C75A21D9613726C2BF13A5F2878E8B40CEF35C3B39362
33D2D152922853B02A1CC4D5252453B5D44FFC03FE273DBF9987C249B2FFD48E
412C021129555BDB74AEADA4FFD8EA5B72C2E22D573FC44DC2384E830BB07E78
E38E338931B7A1D9727E66916907D980BF76665495B406F4A29F6800924F33E5
D5D0F0AA5A7D1A0D77B84BBFF481392E5ED76740839523651321D8EE9EB25076
1E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.0: CMTT12 003.002
%%Title: CMTT12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT12 known{/CMTT12 findfont dup/UniqueID known{dup
/UniqueID get 5000833 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT12 def
/FontBBox {-1 -234 524 695 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT12.) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57D05DA0555DF933BB0
7B42D264831116C06C79335D519461E7B0E870A6715E3D74A08D1BCF86E3BCC3
A43FC6BAD1C68BD9D4AFCC06D845FD1F1E70D7A47F0BBCAECE8396E04591E5E3
4797F646AFEEB7DB548183F0B74C9BB6BA2AA04E7F5950EC8AE97C741D4B2C5C
A8E7A8DF5A36A30B5A7592D95E1DBC63EF33C92FE459792CED29E2B8B6919251
75EF62089BD7D44A6E1F9B62EC802FBE62B821DA1C3B2DDED45D27964AD29ED0
9FB7868F3A8FEADA87A8E42D52C1EB7229D7C79B60BDA263F2BDB025AE14A507
098FA274206BACFB4A0A7257D5998EE8F0FDCA79CB61DD1FC59DADD11E16BF02
ECDFD706CDA1E72054D4EB55AF7BA9F19955886BC0BD6E0E3FE3769C94AF3581
DFB2BCD67FE2892AF07E858A01280194D8DD7332B3D0A585C87FAB056C2EAA9B
5AD48D1C9F00CEF8EF0D1408DBE1C03D04B231D7B8D5D998FE0CD7EE19828EF2
F988EBF6DDBFEE00F04A4A1F4E1A55DED7EF3AACEAB5005F1962C724A017C914
2936E2E0DF26A55ACD7DD836C6035CBF07981C1BCE3615064F0540A1034C69B4
E3908E76EF8925D486DF0B4A8E1F02D8AA99585A7C31847AB9382F83880C1C21
C496AB2DF8E7BD4643B28B704B5F6B53429D3EE940A79135F5BF0396E5B46F23
42AF406C26D12BEA7A41F332AEB75DF43C15334CF4651A99F602036946B1B91D
4BB0D2E51C20216D892C8173241AC8FD15A37C3CDD8AB4FB67D8565AFA61C068
95E3D6E46D7C09BBD09428207D506AD43C693F3C3D787F6A5C39084AE45E81C9
830900DB50DAD10A17E118FB5E9680B5194716A788FF7514A1167DD1A305FBE3
FC1F39A39F5613D50934419B95A4A2FE1B6C18912CECB86726926F6B77B5C3AF
F38F85F974A2D2145BE010EBB4A390B842BC222AD4A0B7FDD882668C04C51F19
13FF91E7CFA0A0F4E99A1944B272E0291BBF3F9ADFCF3F625B87377AFEBD9F11
6385726E908BAB7D1357504048C0F5B26251A1FA52F08BAE1D64B9FC32A684AE
896F3DD0AAE9624050D4DFDA25E581FB2630E8840AC5322D38B92F3E77B55CE2
91ACB8321BE53A2C7D274D63CF0C68AC833BAF4B22B26EFC197D4A893A5AE492
660D995DA9294C16BED1113CBCC18AFCB5968175EE2FB374B1AA261F22CD75F6
6E7295A254FEFC41A66EA6833A6A4EE0E75EF6B6FAF292DC5D2AFB61D5203DB5
4BAEAABAF39E9F98B45F22F2E37F337A7BA412807D539C91F3FD1AFB8E35446E
DAB21346AF2FEF98F7751360B1CF9773DF4D22A358159B4D1B847C6CB96DFA5B
50A608E1795688076278504401627ACDC2FF46E28D21B53CCE01B56A7B0F0733
C07118AD5B74B4984EC478D154466F4C961C10B92CA34EFF106ECDB5189BE09A
D99F93E225D13CE9B110499CE1704474A84950586F2D9471E0F6C5C6BF92927C
72738B439E0169230A163C5BAB8ABC04D5DB02C03EAF493735D8E02B201389DA
9FA44A0BA9CC6A4A177BE426AFE898161FA19D607B3256DE5C4120980D91DA2D
1E5AA1E5DA7473D2F61A09889BAB85D415861028AADD85A1D2259416248BA507
1BC9F6710F26B11DE73109D32425BF4CA345889421055FA58A2D45843E3A1AA0
DC0714164359BBF26C2A79854F5A2F79F8133507DED53EC9C36A6CDB964E9D05
F503E2A46809180AB2229E4346947531E3DCA264BD1FAAE72940139AC14A1FC5
33EFF545A513B7CCD20615F574AEC5D92F80AD8CDFD944E38EED451B5A69EB2F
42AA19C5A079AC1688B09029C72A134721C616186D7186A5D5907388A7561889
87152291907BE7DEAC0298F5661485912DB10ACE10E2B10D18092845ACCB7F2C
A56E5397D20E43456533CCA52215D6FE8A368B398C1C7A657FC836CB4BB8B613
524DD841A919EF12254CEE75D50AE2EBAE88D16A3E38747004EB5BA7F104AFDD
9A351AEC6FE2464D6C7B106921C0F001F29679720399E48446568CE5E938C8AE
85872B65610A51B2DBCAA81E5F98A9A3C44AFD9A344CA1B165321582B266049A
7055838FA5A24AD1788AB16772D610268F932A6470189A32096994AFE293731E
E7455C04F0E48DD71B40FA4C77BED031DEF16635A9525FAF44C26A858F8D4816
2829D55F587F3F5C8296D00BBA2844201453CD132F85CFF395A5689C8C63D1F8
38434454B11A220B417FC3C2241E3F07687A5CE13DDA50729CCA8C7DBB51DEB7
A5EFEE6CD73B2E326ED113A0E7628F1F8FFA51288498A159A76915FEEBDEE650
2360EBF5D7EA9BCED4EFEF9132B612233D1424E6715E962F1FE367CC5E4F8D84
18D09C7A722E7220CEE985443FE386DFAC2247BED76F87AE17014ABFC945DB1E
4207039AB174CC4B4B51ECCA20612FE6AB36094477A5A2E4F6DFA13121C32A2B
949086C1610F5D080162089DDFA6A24F372AE4CECB666F560965407336A6FE5A
02986C0431F3D71361530CC6303B73D9F8AA06EC55553B4AF78E43905092057A
761980CE08ECF000DE5D58BA9334E274E2D72DD8401A07E77A530350B8173757
7E158CCA81DFAF0CD10B20D52692B29088E335F0C5B77C25D9A46872C48667F5
41DF519FD2DC4210B14AD509C69B4FDB506225DB43313D4ACF4F1E863E696004
6BEFE46CA5B08DD807411FA365DF8D8757B18A43EFCEF0354DEF437B94D5F37E
1415B302C2827BAA762261909645EAD010BC2790F54295649CB73D2767642B43
5E446E7C179CB8067749C8410983774A1ACF5028390921518283EE878B36E071
F9E953BF3B07AD821121CF5DFC0ADBA0C5E615FE49C46C4034A142DA2C35FBE4
DEDD97A62148E5459E003FD0C6D4AAAC6DC4005FE308CF85A02D57D12BB41EC6
32257AB8328EAD95E9C841EFC9C0C471DF42EBC4183CC417645C73E716B47AD8
C318B6C51E253574EB72857291E79C286DFA0AA49861BA7C1636C7C87A4B1100
157DACADCA0462253473374EC40CFB8C96FAD542D563008BC76B7718BB539366
352359BB8B3D387E63114DC1467F0E832CA757D2C6110201C41838208700721D
E46E8D2261DF7E5E12E49B3DA4F9C1DCAFB39BA10C12B0BFC8209A423942A5AF
29ADE5BF0E839EAC6E0D1CA9AFAC9336EF6C9C202FEEF0105314893C02F52699
4E72D994093C9D2FA82747D2881A1A4866DFCC73F6AD02D6AEA742C95DF1EC15
ECB7E8C9034B15552330DC1F73E5DF8B8AC6F459C165FD75730FA208B6C7B5C1
21106509D087F57B98AC79CAA7D8CFFD136C9AEC4D284F6939E37AB068912BA2
978C78EB118D0B8E2D6E916D6648115A30E338722451CA7A4AFE410E771A165F
F8D14F1717B8079808FCF75B8F5D90EC879D04B6391E980F9BFA4DB8FF129359
3F8751F70AF46D70B6FEF83FE4439E517A5B37B8501D393A68209A16F00B3E74
44F0F81144FF626B22F741DAED97D4A65D1AA26FD95A27B45E4EAC875AE4007B
D3ACADA4DEE85A5AD02726DF11A4CD058B265468B458D1179DA9D76DA1CCE004
B6D4D6C259AD9717D64648397FB2E86C2DC427CEDBB7546390C17F35857D1370
EF82C702FEE031F4E2AB31AAD3AABCDFDBCE66C165DA4D8959DE9DE9C7D6598A
400929C0C0FC2CC4D338CB53C181F2E31B3A16F72F32021DE371F56C1D363638
CB132EF551B01FD8A984E01AFA514CA42C3652012722B588B7364726153A230A
0B54FF770685BEFAD09C367A0911FE038CDECE5DECE52A0AE873535151A4AB68
95AF47505D2916BD2CD706B19E6B4D08B312A0ABACE8B6D881C8DB415E5EFB92
7B6B669369AF839033AF9D7A7BE436D96E96154E4443280FA1CD902580F555CF
B999F08A76F7CCEFED6E7E4AD63E2E1E23815E4FA2AFFC4EB055DE276721BB31
D03DAB617CA8B941DAF85B94AABFA2ADFB50DBC4FDEE1162C03AD014B31E2C77
6016FB4274FF47956324638027CAA4E76FC54FAEAC755A743C5E70CCF11C2C0E
B074B35D50466D3AB6066DC6CCCF2A8C6899A75081340C2C6BB9FEFDC29EE913
B20990316C2F8F5BF16592CE2AF48FC190C702A5FC448BAB76E2DC306325B8E1
2E7855716624C11CD30F579A16CFC15B67A329CF8C5B352FD4124E4E84B2932C
304B45A83844BC6805EAC8AA9CCADEB26538818E5E9E4160D1C7E8540C0F29CC
A2937B23CAD3C309D7882C613C928B550E640A5C5D887F451AEB41BD3455BB44
C5E7DE4FBE4D0FE296FE59774F16F4BB9128720E21956A2E033617765D93A982
89EE9F341FB9EC0FB40C47137E5E29093DDB62B49C56E38300B2BD0EC3781365
D471386F637F4ABFE774703C1D932FF9CFAA590AB03116DA000206274B91CDF2
EBB8E871664A1C6543BE5456F51E8BDA841E1F814706BD1DDB0FCEA50B4CC85D
13A6FA967A0896DB200F68D944F667534BF4FE05CF14F606B4035406BAF9EDAD
A24489392D8D5E7B728386CE455A0034D45D0464AB98A8BC634B254A178A26A7
F0A4B427637DE7FB077AB827ADD59FB6062E6C288D48CE3DDFC9D82429E5D43A
6859AEFCE7986DC9C8D13F4C93B445261C6B2F7112853D12ED5AB49468ED8CF1
5D3CB5ABB66247EC0AEC0A04474D54BC5AA9F511611247610D835EFECA023A48
5937E6F071BF0F3A5C07354D4CFAB948C4469CF82E75476F047967C546CAA5A2
8AE85218B71D143C80B08D8E5588B682DD3BB8F09F99E0245549A6232AECA764
C8226E5834E824DC4D9499BE5251BC17FE90340CE9AF4B32EF646E49BC415DF0
04421A3BE7EB55C18B7DFC6F177FC4B081D2A12FC59075866BDA48BF9FC64B78
D1CCBF753DAF9B0360D2A2E395345871E83C8EE81983B26B8F13CBD90810E744
EC50555BDD63BD7E989638A37897AA763203CE52299DCAA5FAC2F992FC0B17B8
BDCA70AD0C0B9A6AB57620FEA41EBB76242FAE7B93FE13908E8B5180F43ADB70
A3D01B30767AFCDC94692270C7950A7AFF5BF4F846A96220B8904C60D5F1A206
054E71089F6D1D6A65E51C0E59B22606F791EC48B4D03278D8AC9D3A9B5D1E9F
554E58CFD86284A375AEA1A0FDAA7DD758C80C1631CC2F34ADC76DC0B84D922D
E27BB6E7CC167C9A29A43302205F20B81664D76618A03E1419695AA96ACE51D4
DC4661DD65614AD2AC4A0E17642356ED2604EC73CD5A27C12D6449AAD02FD92B
318FBED994F3CCFBB2CAC80B94424040F90852129B3C7769F1A1A76F1B5FC3AC
030D9A25BDC0A7A5887C58A7998FA34AAD8CD1675B0F3BD620D15CB3A8AD3FE1
55BA0E3B6CA8906E0F424923926DF1B7C56C06847AF5F98D3A7DA376FCC2EDD5
6270C9BF81239D9E2B085271F50BE3359616DC6E0624B23A4050E01F6F4CA841
4A4BBA5214F5C92BDD13F1E22422E4D3EAD08CC09A82F32EF841E8F554B06A8A
94698C008AADD035545E90949345F64A8BB75EF2F28AE3BA3EA48C83820AA5A4
E67B402A6D39F1B84F3AEFE5F55F5E529F7BBC704721FF3BE6F3A42B104B1099
A9A2F52E946C7029F5DADE058DAA68DEB11D1054AD503EE24C7FFA981B02044F
D77EBD36ECB54396C62CD59373621E2677697B54ADA5718B5463ACAA8C84888E
866078067B9760A420FF5146B0778A37D19787C30DC1502036CE209D8E5F7CD0
9AE24A95E3C8C899F6C735D8DB7A95BF7ED12362EBCB665939A0A69BE82F0896
8AB0508405404605A7B5050960D73F3871824C76ABD2203B8B0DC17311966DA4
978CAC9D6D5657083F4C2A62286EA571B5FCB30131F18B5044DEF9CBCE5B8AB6
9C7C4469D7FCACAF71BA9D87752946FAF4267ABA9A2D231F6E9D099C0245DEAA
05F8FA23846ABF32145E328BE43D81C3CDC65623486332C4340B8A04D58E4DE5
80457E6724F36029B149DA43A19D09782F5E6734C297A56555621D0AF1ED94F9
FDD898A6F33BF1F315E9702F384741481153D688534CD7EB597EECB148D1F57E
074343A0FF1219DD92ACD94DF341CE5F0E4BABA1DB358730315C71738BFB1739
DA174DF5B93667DD93C7631B83D800
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 14 /ffi put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 59 /semicolon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 77 /M put
dup 78 /N put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518693AEC75AC0AADD0C11B0065E2ABCF51132F3
82E3718B9A9FAAF727F2D8286177EE27BAD040C66D0D2AC982EE27E72DA39C71
16CC3CB1C244EF6ECDE44CA3ED20E353665C246239DE176950D9D434956C7787
AF2DD6DB8AD37B9D56B3AA8B0045A42A80D8F8558AFF1F5FCE336908F3BC7BF1
FB3EF3AC463759333B27DFA72C239AA94E8F4749BF0349A01053B43A88DBDF1E
5ED7401FD70B1ACBEE3FE22F07E54428D6D723C01F3AE1C42538FEF028E92E45
18EFE98D25C59CE8BE519B77A0EB103568585966495FA45468F7B5F265026E3F
395D7841D81B412FCCF265187573ECD806139390B44488788DC62314BD82C47A
BC3918EC076F1FC88DC88FFB06B300138EAE579C346B62D37FE355851A0D35D2
D408B56CE034523AE9E3D1CB6AF8F4991E1BF8739C6A0B905E9AD1C217388D01
F5145260FD3C7B5F7958C58A5E6258AC1A7A90DD7B7F0EF3CD3A378D10A80C6F
42211D0DABE27571C1D1AA55F7462C0484C2CCE838136D5F7A74457490A96CC6
8AC57F1FBCC593D494F45702B8FE1DCC41D4E2BFBC32213882EA4F542C4F59EA
AB536471E3B34E90482DC46C02D0E9C97C038A1C97630F183F6BC81362A681F0
B6C4DF852778F1C4372989084A722CFAD8A2DB149DC6B52F1D0111E6F746248B
8B6CC6F304EDA7A43070B56CC63666F40385D9A56B927CB6C0CB60C01EAD4C57
63BD46182FBF7A06A3E095BB7A44D2068B60B7C430441703B74C293470D21C73
8DF99235FC8A5916015C7B11C66CCF7976CA4DD1F7BA8791A95D7CFD7F739199
58325F97DCFAB94B10FFF6048C9EBC632B97709F149C075C77E2DCC34DD909E8
1FA1BE4CB44BD7D62B92BDD690C69D1B944090E90B808EA8890EA0DA4C0341F8
A86AD53EC32FAA0FF6BBF8AC09F815E1938A97B0F256B2D69EE100245AEB546D
6AD649769829AE8E41B71F5D496FAB3FC0F4F330EB42DFD724786E379F2EDDDE
3AC65FC3BE1607F03E42BE8C9117FE5D3593275F9E7C654DA0684E2A7F81383D
7241D255BD319734E4218183F75657BCDBD411E0C85813DDBADBBD8B67F84578
843ACF9811AF850C514D301719729B7D0737421E74FECD26240C732D22991D6C
2D438E19B88D9DE4D2452C93C8AD69F4156E3B8A76792A610AC5F5C7693150B3
B6A5454C36EE9AB072FB883F192EC48FD95F44571BE853A8A93E9433EA3BE273
623BEFF579C93973ED503182417C1EDE25E1940BA246250ECF97A52EB79D443E
EF18F4F884CBF3F18099D5F09E05305E841DFC73D7F7EA87AB9C3135042D4F69
1AA54018C0A9F807B5FDE2E7B3F9019E887364FC4169995DE02CD7EB7C842576
339D6A2C57A5E78370FB844A0C77578FF5B992492F2CC3743C3ED6985C60C0E4
3EDC8988D09DAFBEEB0E5ED842C8F1613B9C15EDD18364C2541BD0F346D60811
9A31401E41BF7FFF0AA3FCA3A1894F0252F497A4BFD09001356D443AD98471B8
42B82657C0537E0F1FEF0727482A49914686388DA264D19D8E0B82D97CFB961C
E95A1F46B2510D880F191DD98770778150CF14AF0A45C877F7253CEC10A412E9
2BB6F09E3A6CCBF2FF4B0DA6714B3074617AFCC321D2AB878551E230053BB871
655FA8E577AEED2E4C49E7EBEF6A4CE7220FE2186EC8D52549B3C93F7E78CDE4
93CC921F07E455F4983CCB923AE0249238BB221BA9F33C42BCDE9980DBAED1A3
4EC2A9E07EEF44657CD175F486F6EDF1FEAF4CCBF5316D46E9E734D10D5D1596
720DE32B368876BE5858E86E538A513F3C100B5FA02EC334EB571E8B7028B94A
F68ACF91993FDCD9636CEDF0147693A699F244D376DF112DB8034F16A0F71A6F
413DD9DD09A8D51DFC2F629A87D192FFB632142390C853447638D8C68FA184FF
A5901C5189A95F302677C1A49C02C9282A5C00CC6FBFC7471715F804AFD42C3D
59E3BD3DF29A0FE2517C21918D904DF26CCB6A9F84463BA3D9FB8DE6187D55A1
B6F02E32915A0C77F0E7DB55D1FF4538B6EE77E136277082057A6418755D19F9
8B65AD454ED75CB6461B40DBF59A7007A4EDD070362A066DEFFA8EE92B1218AA
6A1B380F2B772259E439A100C14385B758500AC9FBEEFA81FB449ADB41C4E280
1F7ECBE15064E777A9A39967BF81F4D6C735A130560355B0766A44A7EAE4D596
9779C8D217C28BCABCBE1013293E195B39EDF11CCED9B0CFAF3FF85A27840BC8
FA3E02D9B59FD7BD047BE1F46443652A039524DC64BE308E555F32F72B06BF06
D442D5ECD5ABAEB799CEE50367638DC2A2036A0834407523C08049CBAA0EFD66
423E21EB0FD1D0B25067DF2BB635F747C3777E723C0E6022868039BD88D20151
BFDD5E99A0D51FD848C066353A948CB5F96A1B5F9F6E5BC4FB37827DA301C0F4
BC960B0A3B3B6E4CA4F7AEBD7C9C748417EE6B9E28B45D23246A67E4906C94FB
5B12090340A268B0DDB25B3C3990FA57D10CC75ACDE1FA7BA8D4E5E0E02BCA6A
EF79B0C14E9AAE5E8487D260508461DCFC50482FEEFD7391F9AC2A7FC9DF3CD7
4ECDB017E66FD18783C56154D77B36E58AA2920CC2B87767DB5A3595092C8B92
061B5E2E2CEF9E701AF5CB880DEDBFEE79B59413E17E095793512F8FEC39E0B8
14ADD8B57A7056EFE1B3C161E0965B9595E648657959A5F19C8A9EF02D42512D
1038F18425E37284EFFA943A24BAEDBC18D12EDC3926D1D8F8C6F389407FB952
5E53EB595A92A852EF6DEEECED9ECCCE83BF134E1173F6E504106C8DE4A55564
08871DF339924973FA86299F39452B603FF42FCC0A0ACA68D6D93921190BB5FB
6010167E43A4996D55D0C443AB96D389C9E52C58D701F62C0CCF97D6AA23C286
6945E4698146E1CFC35ECD3E55802FA5F79C6E8BAC5A59B133046668DD7A74DB
02AE1CCB9DDAC0CD9AB4E7CA99D93445AF0E1D65454D7F32605E6F151FA2548C
EF4DDD358450BF66F2A2516CE7B7C2458BC1CCDA6CD28FF30CF0FD0ECBB931EE
D05B7E3212954DA1E02AF2B25F350B4D98FA5E55AACE54035454B4EE1DC67CCA
35CC34AA087A3AFE35857B2E33E97D1CE85FD6A4571F4081E0712C71879A0B8B
88A2F71A5C275B29C514CC9B8BBDF08BB7F9A400111D34F967AD2D42E39BE9FA
1A286B79721FE2CBF641145E5A159469FC1D539FF3E311B2064E5B9EA6010167
202A0FBB03F5A6CDA48665CDCC4E722DB482F8380C62F4929C0492E3EDBB2C34
90BB334B4143B86CDB734BDA72F46C92C895D3A28F9DE352A8877B4B4955E295
08A7652692254A6156A2C2A10C7B1C2A4D9602DC2DE18DA3053CA44C1ACB3E7C
6F7B7F9982CDF0C9494CB83606971ABB171B9F570524141A1ABF944CA746EFF3
2838B6CA34623411D98BFDF196190F013FCB0EAEB3AC237DEDEA72B833779D63
DCD31098472E3001C25D0E27A978B47CDA9E2283944824C2EBB2A2CEDC259F87
32BF8BEDCF0960D0F4FF91EBE7731784EC89243492890537FD412AAE519A5BE6
91940128712F42B7F034B86B2797A1FA4D931BB66F813BD70994DD7935C1DE99
420D2ACB65D6ED171570F1C951E77840EDAB72B68AB9B2A6B8DE10B4A7F7307B
56B827EAAB837255F77A5FAB97C13009DD0625556CB9F2577A3FA262626D6756
161537B8EAB7398F47B02BD43CB070CD7F021D52198EED89F10B13473022C665
DDE4EEEB70A7FDC1776E3E1A4154168D5AC57F2F9B6595C7CCD5180D7C23EC11
45013666582454995B1AFABFBBA382ECD21E50224DC53B65F57749492473689B
05FED6B7CEFE73C268B1831164B8E7B5F0A9A957BDFF23E1C66565BFD6EAAFE5
2B6252195F111E5B6EC300600056E4C054BD8155F1FC200DECE2D624A0A5EEF7
3F6DB6326C73DE45EAA21549897793A388006ED80A510E92F48489C5B2546AB8
AACAC9BDD3BB24897AC27857FFF3D7FD5853127977C7872995EA568D5FD3E22B
288423C4B04AE2FA554EA71681C94F6003E272CDBEB82913A484EA3186254A0D
260236725BFF7C720885C532F0FA4D3DE15B5EE32FC44421E07B8950A09B0E30
A15C01876F2B5C1C391FD277A5510ADE4C7E73504BE81AEC2BB29ABA25BBCAA1
C4F19C816B9725831C1616CB442EB60B01F9E1AC5AC8DC89C5955241DF005B15
C8C866C38E61DC12DC242494B0AA1C96816E4D0F84DF4ED186B32B9AC3DD54FC
03BECFB519B559F35AB3DA6F7F670BA64EBD0D4A8D32E94DDC4820C5B833BEE7
F90F4966BA408E339D24944ADD425CAA82A396B0E81E1F4E46D6015342DF6DD7
ED3AA788C03046C54DC226916507ADC0519EFFE5D98FBE27264C78BD0E3E3106
7B773CBCBC7AB279C5ABE084B5DF3E6AABCA8D7AA9FD3459A749E892F394EDAF
05BCC5EC1730F5DDB456042ABF64C5FC3BBD18FB39C8F0C692436FC7F8203E20
115C0A2CC05A9C30A3D86FCD2596BD3AC51E53F03B4C99DBF303B6C08A2B412E
BBC97592811D4F1856B9FB9D051B58BE237D859A3B1664A2B40A165C019AD2E8
B48A819DED4BEF7F3BAECF7F6E17FCDD5A31EDFC7F86309618CD00E6C90151DE
801252E9A92A699F86452FC6AEFCBFE9447A131A2B433F5B1E0DD0E6D123212D
B1E13BF24ED2D88E61538781240EB9A854B03C7A6DFBC59522847DCE1C06F986
6E73F0251136C5848D838CCB42BC31CB013F4E1C147643339E50271A937687A1
757C0A69CFC8A18113F441223C23E0B0647FC9040EB5A5FC03361B8F985993AB
577234F914FB07C6CF43675A5299816DDD2B21CC62088B5CE3A011B64264D882
0E196921081D07E34D141F71737BDE28EC36DF24F2008D619DB7FABD30C7A23A
87F4580BE75FAB6E1B0DB5EABED5ABF57E8D6688433B4379BFDDABBC977B47CB
1D2DF1B9693A64CEDB39B639C9BD74B0323B4F1AD1A1AF24869C4BCECD3F0A11
101C2DFE5275B262083CCD99D48F3DDB30AB4338F9AF8F0EC43531122163D85F
D38FE4CE67C52A9659FAC2310D67977B35824257B7626635FCD6BEDDE7E27F27
C137A0801FF94CD11B0481AF19782BB4B20083811B642738A6FA53DA52E37735
073AF15D4E2FDE175FBFF6640E6F7B68A2B25E5E29969F037684400C58371D89
04676EA3E0B0D5D7A6FF4AF3BF1467EF2FC0E98A2B0FB492B8E0375F7E2C7539
A574CDB87AB1E6948FA080D468FFB4CB1521402794697FDF633B8870ED281CB9
F9D670AB155A1F999162E366F8840E0C3BA4521F7237085CDE8E139E08D312A4
219326B437750D1338ABBE0D1E5C23CCB268CB2284819A17B18612B5D97756C8
DA9E331CEE6E74DE1A187366BCFC6FA4CC783A122FCB6621EF2536951EB3CE14
D60843B0E5BC4EF204E24001364E472F1FBAEF6926327BAD4ABB1AFB0879338F
F6B02D4666795C083E6DBCE232D566A9611E69283749AFF2CD6DCFB9D405040F
BF094298147900B485F29973B1E2C73E26CD28FC63842EC56B86C04A410867D4
6249D4FE6237226649D84DE2264F49A942C4C39FB8AA93E1FB743D04FA7DF1DE
807FF8DA042AD5A0170CC19568A0E033EB7A4664B4C69894981FA02DFE8421B9
B980A03B1F5C0EEFD82FAD2D11BB280306920581E9CADCB49E0C2A9D3F39AAF4
290793C68CB84FD97ADB0B065C5013BA83183FB880E868F18A9F186EA84F9926
A187451ACC2B8299E346E9287E313C9DBF8AB6AD8754D681B50A48C8F668DD5D
C2C64B40AF71DACD0A033B91C904D1180EB334F1FB0E6ACF3DD244C32A9EF967
CF058CA9A34DFE95CA7FDF638EC0DA6DADE4CB5B681FBD4F3757721EECA4D445
ED09A9BDCC53DB3594739E414E9A1DFD2744659C08A20A0B1C570455A1507F16
616566268F51E528A8E1E72515AB620203E8298E62534E4AB657C74A0E0E7F1D
992278B5BA47F1F6131AD22F4AE861A034F64F7B6DA83222003ABC9B50499B8F
2CF7DE35B0D48352A34165D4504E27F015C616192ECFD4B4E8FAA2B93EFD4B6B
4CA785E273ED52156CB8575C5781E44C852418BC56FEA7092596AD16960AD43C
E1449567A4C7AC8573D020083E28AFB333610CBFBF70AB69A055EABB03B14326
F4451F1BCBA10C0AD869BCF62DD8F26F0F9C8F9C09E4C2B18F4F20A03837AD14
543CACED14B18D7E7A101774CF43F82DC0A2497ED0A07467BBE7A6A24B1417FA
3CD981ABCD40844ED5699D0C349C7BCD345615641AFC0548DFCB761C72062324
37A366C3DC5DC4609CB853287F9B251E3F1F3D376C9B0E446D4ACA4031C8D766
8EF08D193A16EC406BAE7B31A7FC2E457DE3796E32C2ED81B7EB3CDC4E8ADDD0
B8262348EC45037666DE07F482F8B54FB2997B82F6677A43A388E358B5F56869
3A3C524432A75CA8F419C07AAEDDCDA7F8DC28E8B46850CC63DDB6C027D76444
A29402AF03222051268AA77A5B263B18BFAFF7DFB82A9F9C095591E07520CC31
61AD76BD8CDAF0B8639B6964C4F9BBBD89139EA8143454E39F3759D3D859929B
1D38442414539E7D8AEA30422B46E0A5FC4B0B4EDF33A5EE661DB3B9168AD6DD
93EEA66358A62E778833729699393BE7538AFFD435638B3162D622FAE515EAA4
06FDD137B795BA76F930A8EBC02B376F965D49CD71D306522D8788FD84AC1B8D
3EFD03CA6D911E9ABA8974F5C81AA212429864402961365744CE120321EAD082
23362EC5486EF4B8851099478EAD6A88CEECB13F38D4D5EDD589077D7E4618D3
80E5DDE3D37896CD43646BE747B9F848ECF645C08680EB6C77796C343970D7F1
72D37094F00FC461E9A25419010C5F68605EAB39362F8F195786756F043F42A9
7AA93BABEA6E42006ECA6F0B892517CC1CB6147D7BED0DAB21A64D9A459013A4
87D029DDAA6D87378053A391C0A2FF881E5C85306DDE19C7A68C1010B06A03D2
7E8C7472D33502D3E7C54CD52057779EBC03CBAEA9E395B34AD95CC3310236FA
6D50415081CEACA41F1823A3F140DE2202E697A40D4969356CA196F0788BD537
1E06996F18CC64A69FB22521255058B863CB35ADE2167EAC80CBF8AADD0F361B
11D587E4A503E94B8762058080A164D37925D741FF88B3387CEADB24D9946B9B
717800A800063BE390B4B39408330ED0FD35F425F0F8F02704F2211836366543
AB934CB883A654948CFFE253EE529E9F6F8975544ADAC6F2449D55E90472784E
11B357EE205D9CE31AB24CBF4811638E70DBD9899986374022DD0ED0B8EADA20
8B67843FA2B8BCB6B2DEB1033652BFF62496A7C40FB629B96FED8A161CB10823
15D0032875A5944FD3C3F59CE2E13030A5DD42B85ED1CB5597782BDA340163DD
FB2ED465704A10F9904E761D36D4012B5A2DBE7FE4A71B3706D2D2AF325169F5
9886009D3633103C06B69231B84A9B904654DED4EE44F84647BE0CE850E881F2
48024AC5BC2879CEAF2411836912333531CEE2066C777610DA28FC7323186248
4256A4CB1834D30C1B5367C8733F98F155BBA4ACE47437D2651FC291F4AAB442
5E9D7C3C4B6ECE73AC61C6EEFDE5C3366813D2AD05012C22867002739BA070A8
706DA72C77C27F3FF39BECC58CD85CB96FE0AAC58DB5E0FE68BCC646AFD21738
5FCD49948B51E1DB3EE2DECE96CFF51D6A355CA0DCE572003C1B466032656357
D93B832799B7B3CD74418123945BA11A5AEAD11929B7C889C87F388E92A6B00C
5CCAC06146C7BD4D10549FD02A1A7E3990F19A0697B4D0E8F473B709C611E7CA
B7AE0C91EE78CC34F8032ED6A1DA61A0464EFB396E9C325EBAE939777AED0E49
98EE3217189BE80047F77DD585D31F0D8D94885DF784DA0937C74083D17DDE46
234BBE682213AE88BE9BE4A31C42DCC4B9789C73A6AFC4C1439D1307790E80C7
E772E849FA8097F464AE6615A0AE9511059869B8CB08A1F33060AB1843860E42
96D45A378AD3B12FF7AE837551171CE2D5A099E268FA72AF12B8AC122C27BC3A
015EEBE7A6D52BE1C938605C6EE33613BF5E121B85E5771FCC610A4DF1146AE9
2C2E963919FBB03925589FD370501A22E056AF840F07E59A3EA09F6BAF64F09F
B2CFA47589361E89915EFC637F7B89B9579EE18D7F82BC4E6EF71C0ADF2C0C48
A444ECEB1A23286EE30721CC63350E004B41217CF5AB8404E96C9FAA88670ECB
84697B8717EBD6D9C318F83CCB4BCE09FAC39ACE8E378FFA945944CABF4DD7F7
4860CF7E693D972AC2C80F0A8B560E449AF7E10BEF79D831A8A5A6F4BA975112
B8E0F5E58E1F8C78DFB045D9C729A1D9FE74E7081C250363882F445FB35E64BB
294026D1544962176E94D06DF56F3F4F03F3048CF4880C1DCF0AB3814934DA1D
44EAC078BC1B886C070642F0F201401640B3654720ACDE578FA8BD6C67E47BA0
BF354604E120588AF72FE47D4BF32ED56770075B16304094848706781573E973
072B4B10D6D038D7A383CA6B487943F329D1A72B9D855B2F16003EAF219B28CE
F691C1DF3B6373448BBB0A89B839178E291C2F2EA52111A35CD4188EE391184F
0B28C2DA03FE9BC27C066F95880E42FF3491EE4CCDB82A0B9CA6187DDA4E9082
0EFFEA1611D620C6664894AD19C8C99A2600B6609FE505D5BE2E131F6A9CE90E
7F8750D1763CD9F525D7AABA5541019F133D1DE19D869A125079853557FDFCB7
694B2284D6DEC6D07EFB682955954EFDCD31EAB4211BFBF1FD7586222AE83642
E35C1CB23AE39C11647289399C445067D6A54EA973BD03E6C7582E50D6138F69
891B9799773EBFE530F92AAF742AAA01CCA3076E59040063AF55EABA58285BE5
DF16A4104E82DFC4B386384AF2514AC72438D85DB4E3DBF31FCCA35305CA075E
A9BCBDB3D4C16A02CCF602B23933ED90B7CF028B0E9EBFF55B592069D7DBAF6D
77D6A9A9CB28F143D958C721E6372438224BF8B1A023C39D6CDA290E69EB085D
8CFF547271231947A435E68A60104F6931C320DF1D382AA2EB159560D9016FF2
4D31B1DF5E33F3566CED3D39C97A3C99F4C9C4B5551B93A8477552B31DDA51FE
8C866170FABF2808763BC58833C62089D3535C8E279475021F384819CF061728
93D8AFFBCCD044F5790C4D226682554E8844948FB27A95AC7DE598B0FF153931
C14EE12BAA74D0F189079B193F58E0803D796202E6232128F6A09A5350D24D59
4EBA5A7DC14837580C3A56D9BF2FCD02310C732B3F541F2E4BC7E9C219C79A1A
19F20DA07CE715B48D7BD1F943F414F6C2C79DCB2733CBA6039F6B96AE0732EE
4C657DE23503184AC5655E4ED20B9F8C99A4090D5A3AC5A4DF585AA52BBD6EA1
F576A6BF6ECE0A57622D057C9FFBA9BEB6432F941168B2BD26AD8FBA04EF344C
8AD67AAC46BD42D394C849675AAC3CD9AC3763B5E69E7EEDA3B15BD3A2C5C790
09119B8EBDF0D884586826FE7A396470263B334DE146A26EF762C6975C4688FD
B00A1F9F47838449CB1B7A8AA278B4B21BE3FC99B5BEC3FB2E3EDF2758480BD6
3071461DA5FBD88ECDE99618674B1672ABBE59679CDAE847CCD79DFA2A3C0F44
BDF9F16AA55291934DDBFFA76DADB6256FA512AFFEFD4227A529F796AB21637D
000EC7668F14FCB8FD3DFDF3A7768FB589C218A796769783556A0B887B6AEC69
E124CD2C33CF9E3845590E096794176116FB1E8C2061763E122AB29FED274913
9BF007D46A76441C7D2D261A7F19510BCB7CD72C651A8D4603F953ED0C8F9457
DA0FC6DA896D1188F630D143B3D098FDBBC1298777562841582D8F4DDC18B79A
85AE4F46028C9799A5131D9FB7817A439C6DA83B7C152475325FADDB205103AA
5B87ED3A9F5B5B4F21309F568845AC089FB93B9C8D05B666ED709A0C2579ECFB
6E03F3DD23C4BABCAA147376944B606BB65A5F87272F535122C175D8A30C31FD
DEB524020261F54B5BF13AB0D41106CF23D63746D2034618BAB50C81824D0B66
F66FD0F156016E64E677F62175F09D2A13AB92C221A599C80D5D542EB443D2AA
9FCE9461A0FFA0086A05BD16F31F367CA6A955BD4FBB393BAA6D2C688A7A89B7
29FA74886063F22C46EEE22B16F3A790D5548B71E66E261500B2ACE35BC41FE6
C988593FD61E5A0DC9D3AE53204920C2F682E7533E0EBAF9E3AC17D368F3E247
F6EEA48948934DB297EB66E105DE5EDC3AE977B013DF5489A13C16D7B1DBD517
EAD7DD644A227E9DB492E5D06B7318B032122381B0633D82B46A59EB4E2306B1
0AB40AB47BD9E7312904E0015D68EDDCD4168F2DCFCEC19D6BD68F59F2E1C762
5B7078A977D086A0F51D83A95DD0A4821F56795B8C755A820D8CB6DE708E15C7
07EF16C4E70D63838567759B2F3454B7B416EA983083F1E64B92D930CD93BC58
D6539069708015DD8C09BFB5A0E4EDBC166AA36193DEE163F9AABFAB8954D37F
C1E4D7AF1BF0EAF533A9646AA3EC7BB34E008684F113D02A8DED5B1425028383
86197CD38C3E99556C33908DA043D1BF375ED571308C0FD54A2ACB47B78AD526
56DBE441DFD5172861551D00994323D8AE5F566572FE6BC5C3387FC85EE6AEC6
73D944B3148578BF1B49A89568BD15F55DCCFECB0E4FC6ED56A02525A7146C3F
8EADAF212BDA5CD9FFFC92AA2B8687C211BE5CFBE82E37BC82F92D37EA4051D4
7CDDDF7EF1CB382A34137773A7C1A66FE786045EF520CD2A1461D1F3CDA80E36
FCA1B3883BEC1F736F9A749F2FCB90E99B5BC9BCC6F5024CB6E17FA032C74548
972B8FC9312BC9BA137DD7743220FD0C264FE83DBD6F707C6477CAD6D944CF1E
7704A555C89859A70A0FB978047345AA5EE1AAE5EA4EDFF3ADFDE37CC5A81844
A9771221AE7786241F242247D670C96868261B62C83FAC512326B7481883C54A
AADC1EE18A6F8A0EE53832BA89E4CFD80E237BC0006B2BB46812B0CC76E7A9F5
86005D5B0682E0A72DA8D84266D7AE24B4FFB44B27A0824EB7BF3D7E8F3651EE
79136C60AF676F778EFF6B4D4C5A9B1069CF961633D090D2F5C6CA081F5835D6
5AA60C360904A44F1DB2EC7CEE662597BA6638C5FD0992D43D287923B8745CCA
930873C7F87DE1A6E746A1972B67CE4CE732F47317C91011613465B5CEC97B66
37CC151484C6AC3D231086A4AB86A9A1DF0B16B48A261B525965BCD4892A876E
2591669F15EC015899A617FB3B878894F9581941C8A42F7989580363EDB78489
33CBD12042AFAA157AB99CDE634DEAB9D848EFC9473B298F8206924CDE56E3D2
FCD69F1D9D9385F267401BB74DAD6DF371F862AB094FF44E76BD41BB2EC354C4
868D99E6250AEDB838FD20912C9D85C22CBFA51C59CE49BECE812EFF791C6CB8
12B2903CFAA8CF41DE6AC82DBE60EEBC59225534F91E749F5D0DBCE99755EAEB
B2CFAEF7C68F6D2BE85E069D099A186EC69DE6B8B38895BDA8F401BC2AB3EC40
DC7B050FF369846AE37E8F41502243DF9675C8B83B5EE9565D12F9ACDD8966D5
5677D56A75826CA6E05340F53BB526B4A4764F6D962849A8EA335C2AD4E34988
7DB400777C0A3635F131C8E828252B5C1FBF9D6BD9FAAE85B8E4A3FC4EA44765
1906EF3FC44E259355E90734A1B7BE6BCC05EB8A44C95AF09F35DDCD5DDC840D
05932447712AB818BCF3ADF05A46627C0B4AF971E12BA9EAA51B68558B48BA53
F01B5CF8BA940AFEC6020333806BE58925ABA2F76B5E0EB8415372B9CB5D2EC7
D8848642C326AA2EDBACB9BBBF7320000F324A694A768AB0F0E4279369837635
F1F69DE4AE6E028E6A4C48FBFD9136D47221E86985BE1CB9B03D187873E41BF7
6FD987AEC5111993C87A6F9E51BDC6DC3A7ABD847F5DB41FA5E4E60123507C56
EADDFD673CC921C436164C2DAF5C4BA77E5E8646C72D7F5309694084F1AEA0AC
53311BDB4806CD43C402E3E24D14D8CDF4AE6989C1B8BB69D484A92E2E09260F
D7DC4546B42CBFB4124FE2B1315125B6F13A1CA785F5D44169B706DBBF914D93
2B87A00FD1DC30B3C4AAA6DA776AF49829BB3B43B888AB4F88799EB9D0B6E1BC
560959237210A60D256E2D9AA70B7C88E870F4CA582AEC86AE4E2E9E5B9FB510
67084BCDD34EC857D42D81D977991746A1BC00D9DC89C9CFC20D2EB6FB12A0F4
83AAA2D0CD652FE8A763D050031024A1848226B5869893AA070DDC31EDFAB8B6
0B49785F3577F926E537FFA58EA9ABEC7D6EFB871F274E2636F0F10744EFB398
0457E632198ED4B08DFE9CEEC4BFEC0C200504D2848A0E2DA66D91D2A628213C
0CA29FEFE1E50BA2687CE53E0B01909D3388FE244266D1342DF32C3DA4A9F66A
C49EA6600CEBD504EB46F9776FD6A207A0CDFC782280B8E1B54538D6E163FCD8
5D40AFEDCF1EC5900EA7BF99A81F00BE89472445203AF3C639D7D49ED1B7B632
1A8A71371333F4CECA8D48C54B626C8FD4C19ACE553ACAB9867A439F9E37606A
EDE4ECBA2CCEED96BEC24C365B8C3DD97A9FA6510CC739A47CB9C2FA35C90CA5
E437552D85B933A39916A876F9CAB88E9C8687A741ED197EEBAB5246EE9941F2
1A754FA53F3F901BD9EB47591C225A0138A3139254D64FC1CD3C058531F07658
B778168662187167FD274C78A042C5C6826EC5D69FC0527C39F6D1F3FE94B231
365E46FDB98B731058A7669D95A4D8B26D5ADE0D4271F4DC2F1CAE85CEF1FE7B
EC9023441527D4AD23CCD432FAD05573B498EFDA76080B83E61E87DD9D63012C
E063DF43312753C7A4195597D65465A7052C6A3C1F2FEBA0D3894B5219584DDF
AAF9CFB2F5D308FC1E169628DAF5E232EA5D5FD1B8747BF56A4EC47EA032C6BE
43DF1F942AB2FB650EF512272A911CF12D591B52588AEF44A485B83AFFB394A4
4498EFFE8C53D549C0C36A3304A80798204681B686D7A72C5DEC57A03B4E3A25
6971962C9028B2B9F65D99E4C0BEC104829C8AACEDDEE2F80707C45494EC90FB
C253EF7047EC9A5DCD5A9A6B846FD814C873F0C9C59A907D18FC605A22B9EC89
1342CB0E53AE4B74BF2E948B8909FE41A5DEF9A1B2C5FD920DCE498E7AE523E0
362AE9D030EABB1B2E5A4225F520FFB015B137273AEFE385E5BEDE0E24E21BE8
19A755C54581236AAF26D485E8ED60DC801C2E58221B3DBA6C486B865AF03F43
7BE70EE4FDC26D369DBA52FF083E04EC837D468FC16FD0F18AA1F67CA9E33A1C
2322E57D3EFB79890E6D35B79414DF535C99C039FCF7CBCFAC6D58CE8A286AB7
C34643815E36ACD77D5CF86618970B03A8FD4BA19ACD001F7C4AED59429AFED1
C60F5B4032D1A0A1EB8DE0A08B71BBF20E5E72A95A44A991A0D81ADE12511D10
583D677C4FCC2B8609239D36D31E5808B8E1B181EB9A3FD31D5170C356312C10
EDB33AC78B939457CCBCF6011B40F7A7F29713620B810D3326E5045FB243B8E8
7F662DD55AF6C08BC6C0DE1BD646D814AB4BBC4A0317ED3C41B6ACC8DAD4BBD1
D4C47FDC94E76C507C0007BF12C2D6D521E9D0A70DB902029B7D6D20A4E978A9
A0EE8BEEF7723FCE4D03EB2071CC937785F519DA196EF441EAC74D7C44A2FDC0
0CB37D8C93441275BAE10BBBBEF5339E4220F3877126EA68F76CE3BB88CD060A
B49C6680195FCDDA2022F66F0C841DE2473C1999FD368783A2FCCB41802795C8
0825B8E6006FC117CD8367701204263E9712EE2AC9DA2BCB4B214613DFA55826
F8463225C7A874765AC38C98D57F6EACEE473E9D18224D4F455246FFB9230A9B
54C54B8208726337F1D81688700120714C09217D9CD0B7B3E350DB9A958A534F
479B0C9CA69FA58E5D0C05C682F7152C9205FAB3104D9F4491B6AC5D1EB16045
FA6B639380F7C2E24D667D42D9847D5A3CDF18558DFF510AB551474557611121
0259C78A982BDB247BC6C5DB4A8FBF7FB7E3B426D2C22159E57C9C899DD71BF7
F029B8313616C14EEBED30B74C429E15BC8F6B6AC04A96F6CD2A907CD9AF1F1F
BCD5E72D3745DFC0DFCE00D78686DA7AD58190F81111240F12733BB249FC79E6
0E9AE8F8EBC0803AB5179E8586DE6750713598420A66F12077A45A4344C79FF5
D6A6EEE2617D2127DEA2930DAF721A2E1AC64D69810AF45CE29B17F6D666BD35
FB678800176A709A7300DE783C2DA62B9E01EE806F841E232E63FA78720EA6BD
B89AF5B4F7F7478397FBD5161EF18F563107B44CE586EAD80C7A56EF641DF91D
EF86C1737C6A9D2F63A1BF609B422ECD62BDDC65B5A954E3AF0D6C830FB78085
1A9D6B67535F0B159FFD20762E3AD7E582314A45A9112C9B78AC8B31733C3947
2EC2ABC4603D8A8CE57AA10791D6103B73712B131D3E1C43895D0EBAABFC3767
E80AC6A5E12AEB7846C335B8FC249478CACE995796ADDB9D278CAE8712629C02
67FBA58613A0EEDEF7E262E32940DBCC049EC7920FB03D0030F63E9C3FFF1FE5
A052A2F0C37F9D4DA34C1EB8C56B2B4B26BA8518B98141656F401382EE6986D1
106E8F67ED8F6FBA086DB5E8528300BB7EF20309866D4A548304B4CDD888BFE1
1CFB263FE013F6ADAA7968D2561999CC0BC10AAD9A93329836E010FA7AD11FCB
76DB7D1A888DC6B908B1012ED7D0176554141F9011E27E98BBF7F635AE0CA1DC
55C30502F623FB8E1DA17A9038207FEBED9EA10D063C39A87901324F8CA2811F
9391493222942320EA6FE06D304C576C22A92C448E7190D5B82482C14BA7FC5E
4B77D0F91E3877DA2CBBDC0F2847043B6D7A59E97470042461D6F2C4D22DD79C
6F7D0424CACB509B195E79D91CD6D0470A6A6FACBFF2E1CCB95117CC945D383A
D3D670CD301543794C6EDBB196CEC6CC86880A5F0DCBC5A1502EB197B306A1D2
77C80E097856335028A5962D2CE53C13C89DD5F17FE7D99C453B4D9B985AE5A5
E3D9D355D9B9CDD6DAC228D93F3C1D900892FE6294E7F116362179C644A1B2A4
EA278C63B437956F3DEF8AC388228B1392B16B4FEE97D9C232B3762AC1D6FF2C
40218269C6D3813C4A9B64CC0B42877114C9D790E08F0BE4A93D7DCA492211F4
8500E9D481D721FA78C5F3C7F4B1DC498AE7B8DB36CF8DBC5F3C9135B6296390
0F3FDBB1F5915993D674DCD6243ACBB4A415894AAD130BBA63E74D53698AE87A
9FF196EC302513017B9BA64DF901E73B491033113EE43D29411FF794231AFB08
90AB21F8A307E2D72288F4B6AD7EA39E1953BBE9D19587CD45184E1D73DF6276
B486A0777C365019FBAD6BE117525041E1ECEC0CA41B30507834138A16E9F85E
64635575330286B869D59B34C7038E9DF7A638BDFC44EAA47D3298348B75FC31
A5FB7CE0B726FA4DB0D6AA7429F098BBC372190020C31871A528AC9DDDC144BF
0DD9D903C37362996640426F86F538FBB06A499025DC8D120AADCA66878B9F05
DA1372A3E5BB231E0CAC70BDFF6FDC1CDD0AE93A0D8525713508B1E892831D8B
ED145E8A75A79E20718CDBAF55A154C9F387FA70B172196726F39FE9969B9DAF
DB0761B5329462229743A287E305F5E7CCF5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 73 /I put
dup 80 /P put
dup 82 /R put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27932ADC486BD9CC130D94BBD05
43872FEBA04FB8866ABCB4D379696E73B84BBE98FBC4A16CFF22F8A7AF754624
2912C228030FF7EF23D51DD61BEB5171AD31E2B630475E16B6E0F3C78D44AC30
712D165DB204978BF07CE05A2514C15541B5B7CEBF0E822FC0204FA5E1A9D833
71B4C23DC40447A2523389448F480BD63FF4927A6348D51E654DB3EBE3EBA0C7
901A36FD8C1D328193B9727F53504F0CD1DC5941BFCF8E4C19769E2C0F3F8A35
5F7682641E7F09BFCEB283808EA091169300D7979A9189A5A4AAE590668C56B4
4281B33BEABEAEDD2677AF32F914D618033AB3BEE3D71EC1ADE8E528A0E14C84
994E010A604A1022FB40C8F8D3F9D4A64AAD4569F1BC0C7A17930B9C76F0A326
F6171D9D8A0EAF70C25B48C9A91560511F4D0A8D96586F20430EB56EACA2EEDA
4896EB4A1E915003C885E577E9C16354D6BDF4E050D2AB04A29CBE1FA926C254
098A6D935B78EF9DD4A582893E4F1C889C9CD3FA27E208809B567F74698C3712
8167FE825F28F17C4E0F68104C5C6AF661F35FF4FBEF9AB82C545D4A4A6EBD86
96FE83B0BD5DF80CF55AC73393060147283629AC5C59468666FDB1A7D1855386
773AB159EFF5748E0F2770397E64BA81F511FD4AFDBF33C056EA0AB9F4A23CBC
FC76BD0A9D6C3F6232FC74D555A61CDD4F6D5746F84977235AD65C2068806C35
8753AF80858A96E51161C802974ABC9D0169C84AD5738CF1E220BCB71B47295F
25019D7572C32B9C1E8AF6D45C75F743A4F5919737926B13BD607C0A7DCA372B
DB3F73D7E4FD6C0F3BEC3082805C2BB856F1F54F34138B7BC84F49401335A29E
B585B4765FCD5318E7401C13D91299C4CA81E1F8CDA1E718440F9AC620FF42A7
A668CEA69B180CF84F1C3F5281CB93FB3DB273B64E5D369736EE8284F724EC4D
FFE30E1A2A27170EAC3CCACBD58CC82276EF23FEDFACC11C1600FEBA001BF964
67C41B89B3B38C6F31E1F2147BE2459FD96E766FE33321FFCC59638CC378C093
A5482CC1B2D6D16A35AA83A311C6EB75D4A9AE368C5CFC2A281CD10B7E32B446
3CEBC9A7092BF2CFEF3AC5C5F24D2E06C093E9EBE22F816DA70B6C3BA6C6AE24
7E91E34DEC3C72B0328FFF2C8BA6B4940FBC47C0EA7AF9FB373FB3460BCA7E7E
DB457C7D830A9557ED031FE411507EF304BE70AEFE68206AF4FF05BDFCB2B69D
2E4362AFA225B32A4D444F0A39F0903B637170618853341897BD9D3E5AB8D83F
126033A1D8497CA490D4BF9DE830A220174B721EE6FF0AE7CC21DD8749E976AC
968602679137827412DA8F4CDB6D9BA683DEA5939DD1A063142C91DB05EF39F9
44F95BE3920B995D969F440E6F41098E9FC320898B7322A1E8CD0ACA25DA4ECB
3C2EB36880578308ADA3B73CDBBF68436925578CD065CBB5D0C5E362AA798CA3
9D786E25438E298A0F597D17C44B7A484F6BB280934149E65126F6F3EFFEAFF5
656EB68B135A52C1BB318E0F93837DD179BC67FC33222DF81FA42B17CD196B74
5B7513585DA5BCE47B2F206FE423007DC44D2ACB6E4A14D6101F954EB3BD1D01
5A0CF6FE500962C4D0831EB3B77A488C3AE5591346565DEBE7F722FD0AEAD873
E0272D40C5F7D9DCA52F5EE206C34D07AE4399F1F6EF7FED27AF2308D21A629D
F37B7902A37F2CB6903DE3A36F862F68AB62880DEF73CE306F118BAE98CF3DF3
C895F0484BF3D6230755CB917E36492A66D2005362B8090F7F14B37DDE9A047E
68547AF53614A6953BCE0F41DC2D4C40C4BA860388B8CAA216C4E683DC13EAAE
CC28D884D60F2F2E0A50235E82B21C08C0E1EDD80C8CCAC8BFACFCF0485C9389
4E641D86EC310FFEAB01C8E4A514B9FA7422B01F54128FEF7F6E978895291403
A4A9D6D557A9AE853887E3090CDCFA4591ED5057D70EF2973141CA805100B11C
D23352600573711FD8DB219051DDB928B64EB13F86B4A63D16791B6A88DADDD2
8A1024142F38FDEA9E4ABE7C1C968EE1CF3A107368D0D1DC0722144A0131A708
F2393AD051D63E4B8B420DBE5B4F039F298D2FD650721AD9FF995F96E6C6937A
605746F3ABE0D2A768C0F8D45E709D3072060C73DB16F7B6A3066358377370EA
CBB8B8AF93564A7D36779966307D056E52F9E1AAA32E376BFB6771391F570D48
97A163192FD160C47DA17C05046FA0EBD09807F849BF22A636F80997CC91E267
B87E3B845F89287049EEC90B5E21D1288E3DF8636712EAFCC05D3351853A92ED
3CDD313B55318C672D5E7FF3E81BB41B24392DE17B6127C66F2D27648FFDC060
9370452D34E6590CB3F2F775CFFA46A7F2D22C99D18631271751911E25A32BFA
3F2BDD8115EBF85AD14DAC52E3E268BC15C0445C024DCF166171F3B65ADA8E3E
FAB7A98D35A8F7B788F5E3226F1F754B85874799C816A65C6838AA19C80D251B
C0206FEE7EFF40F00816EE9A23659DE9D28F3493D06A2A9A0722E64F88F5EA97
0750C09FAC4D95C096F300EBDA154F6243AE67F65CECE9312E5353ACEB03ED8F
2C840C14AF8F379603AE0ED17D14C873985B7A72A3059C6243E6032309B21895
75008068AF96E65CD9B6BF64281633546199D9EEC9674EE5FC39812148917B9D
9B86D334600BCE3E333B3E4840E65019E3F06C99301606F49609F23E54644126
E8C5BD15913D19CC82A428236B7A5BD009DF7A50B6F78AA27304CD444D0B3F57
745F966E696D63AC332EE47C3310432B7361E33F562A788795ADDE50D13DBD86
D75277A24761B4CC1EC1A118BDC7DF9FBCA56055244CE58CA91DE9D41757F15A
4584CE80A438EFDA67A416CDF7B25F18F44DAABDF951ED9DA2D0EA4A6B37B927
B40537B7081C1E40F98094A4F6D8868B9B8E18467F071C969BA651E7E1FCC93F
D9F480CF58269B131AA53137BA5B77713980A6A49DEA8A92BAFD6A886C400F18
27C1A7EF43F89D6A58D10E575FDA27F962734CB2846B463B5E38CD257C674013
E07A0C7F701FF6D6AD16F9D94A26EF54EF5FDF6E4A30097624B6A6031C8B3194
C834F52E7B18E5BFDEA633EC2ED21B21E14363BF2AFF538D0965CE4BA4D67C4A
7DA8E3225144DEA1F254E7940D797E83E428A1694C5A6ABDAC758962108B8762
8AE353886403FA672E0E0600DEB38AA7475967EC15EB49B61203DD56E7EC595F
C847A92737C5F5FB53F58F1227FFFF0C05C98D7788882109DDA91867A2F7BC53
0B26A960D05BCDDF63E2836648F8D680EA2600B6EA3E53F5D9806C9A958BC287
A3A39E32BA741247FC6210310C650C18287C6E43388EC3BC09C2256D0C6B4CDA
15EC17B25122196E6AB33D1FF6563E00490DBD85B84CAD8EDF6C57202233054F
D2288FC260D34ED1198059C74E16490487CFC6070B57FD6A1FCC23DEF9B6AD7B
2589EEBDAF73AF76EEF78A0013A3562309AF203B725B1043493ADBE55A07E2E7
88D611CDB03D12B2A1A92D1A27250B10D270283D0D5B7CD65BFE779DD8340593
E02F8746120834E9F63CA8A18CCC5CA176DE919352C8C14D3ECFC801ED2CABC7
89C0F367208B5313FA36D73B93C6CD0550843C9957E8B8527A03FFE0EE3BA21A
DDDF6652F1E124DDDE29C150375F0D919A7AF1100B3305B1A291FF610E6D784F
9165B1E04B40D95DA5B8A0F6F75AA41306AD2F3C0A85BEB01BA0F0EC7336D857
D949514CF15BED8E1D41D89859287428B80B133C3EEE88D94B94C0909682401E

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (Project_Report_New.dvi)
@start /Fa 197[27 40[48 4[55 12[{}3 99.6264 /CMMI12 rf
/Fb 145[50 110[{}1 99.6264 /CMSY10 rf /Fc 134[51 1[70
51 54 38 38 38 2[49 54 1[27 51 30 27 1[49 30 43 54 43
1[49 84[54 12[{}20 99.6264 /CMSL12 rf /Fd 135[51 51 51
51 51 51 51 1[51 51 51 51 51 51 1[51 2[51 51 51 51 1[51
46[51 51 51 1[51 46[{}23 99.6264 /CMTT12 rf /Fe 133[43
51 51 70 51 54 38 38 38 1[54 49 54 81 27 51 1[27 54 49
30 43 54 43 54 49 9[100 1[73 70 54 72 3[73 89 4[73 1[64
66 75 1[69 73 1[46 1[76 1[27 1[49 49 49 49 49 1[49 49
49 49 1[27 33 27 2[38 38 2[81 22[81 1[54 12[{}57 99.6264
/CMR12 rf /Ff 134[85 4[63 64 2[90 1[90 5[90 2[74 90 2[78
14[120 1[110 6[60 22[81 81 2[45 46[{}15 143.462 /CMBX12
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 324 448 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def

324 448 a 324 448 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 324 448 a 324 448 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 324 448 a 0 TeXcolorgray
100 x Ff(1)161 b(In)53 b(Read)p 1141 548 49 4 v 59 w(data.p)l(y)324
767 y Fe(W)-8 b(e)33 b(b)s(egin)g(b)m(y)g(reading)h Fd(travel)p
1550 767 31 4 v 39 w(times)p 1844 767 V 38 w(2011.csv)h
Fe(using)e(csv.DictReader.)45 b(Using)324 887 y Fc(read)p
514 887 30 4 v 35 w(data)p 739 887 V 35 w(csv)p Fe(,)k(w)m(e)d(then)g
(sa)m(v)m(e)g(the)g(trips)f(and)g(tra)m(v)m(el)h(times)g(data)f(in)g
(sparse)h(co-)324 1008 y(ordinate)52 b(matrix)h(form,)k(i.e.)103
b(\(hour)52 b(\(in)h(EDT\),)f(link,)58 b(trips,)g(tra)m(v)m(eltimes\),)
h(as)324 1128 y Fd(data)p 534 1128 31 4 v 38 w(coo)p
725 1128 V 37 w(form.txt)p Fe(.)92 b(Next,)52 b(using)d
Fc(write)p 2060 1128 30 4 v 36 w(data)p 2286 1128 V 34
w(arra)m(y)p Fe(,)j(w)m(e)d(write)g(these)g(v)-5 b(alues)324
1249 y(to)37 b Fd(data)p 658 1249 31 4 v 38 w(trips.csv)k
Fe(and)d Fd(data)p 1595 1249 V 38 w(travel)p 1939 1249
V 38 w(times.csv)p Fe(.)62 b(F)-8 b(or)37 b(an)h(unkno)m(wn)i(reason,)
324 1369 y Fc(write)p 546 1369 30 4 v 36 w(data)p 772
1369 V 34 w(arra)m(y)j Fe(in)m(tro)s(duced)36 b(a)e(line)h(break)g(in)g
(the)f(\014rst)h(hour)g(of)e(the)i(\014rst)g(da)m(y)g(of)324
1489 y(data.)47 b(After)35 b(correcting)f(this)h(break,)g(w)m(e)h(rev)m
(erse)g(the)e(order)g(of)g(the)h(data)e(from)h(the)324
1610 y(previous)44 b(step)g(since)g(the)f(data)g(is)g(giv)m(en)h(in)f
(descending)i(order,)g(but)e(w)m(e)h(need)g(to)324 1730
y(write)34 b(it)f(in)h(ascending)g(order.)46 b(This)34
b(is)g(fairly)g(memory)g(in)m(tensiv)m(e)i(due)e(to)f(the)h(scale)324
1850 y(of)e(the)h(data)f(so)h(w)m(e)g(utilized)h(the)f(campus)h
(cluster)g(for)e(e\016ciency)-8 b(.)470 1971 y(Next,)38
b(w)m(e)e(w)m(an)m(t)h(to)e(pull)h(out)g(the)g(data)f(corresp)s(onding)
i(to)e(links)i(with)g(at)e(most)324 2091 y(30)44 b(da)m(ys)j(w)m(orth)f
(of)e(data)h(missing;)53 b(this)46 b(is)g(done)f(with)h
Fc(\014nd)p 2708 2091 V 36 w(full)p 2882 2091 V 35 w(links)p
Fe(.)83 b(W)-8 b(e)46 b(also)324 2212 y(ran)j(this)h(on)f(the)h(campus)
h(cluster.)95 b(The)51 b(list)f(of)f(full)g(link)h(ids)h(is)f(sa)m(v)m
(ed)h(under)324 2332 y Fd(full)p 534 2332 31 4 v 38 w(link)p
776 2332 V 38 w(ids.csv)p Fe(.)79 b(W)-8 b(e)45 b(then)f(pull)h(the)f
(corresp)s(onding)h(data)f(for)f(these)i(links)324 2452
y(using)52 b(write)p 820 2452 30 4 v 36 w(full)p 994
2452 V 35 w(link)p 1188 2452 V 36 w(data)g(and)g(sa)m(v)m(e)h(in)m(to)f
Fd(write)p 2375 2452 31 4 v 38 w(full)p 2617 2452 V 38
w(link)p 2859 2452 V 38 w(trips.csv)i Fe(and)324 2573
y Fd(write)p 585 2573 V 38 w(full)p 827 2573 V 38 w(link)p
1069 2573 V 38 w(traveltimes.csv)p Fe(.)63 b(Henceforth,)40
b Fc(read)p 2678 2573 30 4 v 35 w(full)p 2851 2573 V
36 w(link)p 3046 2573 V 36 w(json)e Fe(should)324 2693
y(b)s(e)33 b(used)g(to)g(return)g(the)g(full)f(link)i(ids)f(and)g
(their)g(data.)470 2813 y(Then,)40 b(w)m(e)e(w)m(an)m(t)g(to)f(\014nd)h
(the)g(p)s(erio)s(dicit)m(y)g(of)f(the)h(full)f(link)h(data.)57
b(By)38 b(running)324 2934 y(auto)s(correlation,)29 b(w)m(e)g(see)h
(that)e(the)h(p)s(erio)s(d)f(is)h(7)f(da)m(ys.)43 b(W)-8
b(e)29 b(c)m(hec)m(k)i(the)e(re\014nemen)m(t)h(of)324
3054 y(this)g(b)m(y)h(running)f(auto)s(correlation)p
1658 3054 V 35 w(hourly)-8 b(,)31 b(and)f(v)m(erify)h(the)f(7-da)m(y)g
(p)s(erio)s(d.)42 b(W)-8 b(e)31 b(also)324 3175 y(c)m(hec)m(k)m(ed)39
b(the)d(p)s(erio)s(dicit)m(y)i(of)d(the)i(tra)m(v)m(el)g(times)g(and)f
(it)g(matc)m(hes)i(the)f(7-da)m(y)f(p)s(erio)s(d)324
3295 y(\(graph)c(omitted)h(but)g(is)g(sa)m(v)m(ed)i(in)d(Figures)p
Fb(n)p Fe(\).)p 0 TeXcolorgray 1918 5251 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 486 2634 a @beginspecial
18 @llx 180 @lly 594 @urx 612 @ury 3496 @rwi @setspecial
%%BeginDocument: ./Figures/Autocorrelation_Full_Links.ps
%!PS-Adobe-3.0
%%Title: /home/vaibhav/Dropbox/Traffic_New/Project_Report_New/Figures/Autocorrelation_Full_Links.ps
%%Creator: matplotlib version 1.5.1, http://matplotlib.org/
%%CreationDate: Thu Oct 27 11:49:55 2016
%%Orientation: portrait
%%DocumentPaperSizes: letter
%%BoundingBox: 18 180 594 612
%%Pages: 1
%%EndComments
%%BeginProlog
/mpldict 8 dict def
mpldict begin
/m { moveto } bind def
/l { lineto } bind def
/r { rlineto } bind def
/c { curveto } bind def
/cl { closepath } bind def
/box {
m
1 index 0 r
0 exch r
neg 0 r
cl
} bind def
/clipbox {
box
clip
newpath
} bind def
%!PS-Adobe-3.0 Resource-Font
%%Title: Bitstream Vera Sans
%%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%%Creator: Converted from TrueType to type 3 by PPR
25 dict begin
/_d{bind def}bind def
/_m{moveto}_d
/_l{lineto}_d
/_cl{closepath eofill}_d
/_c{curveto}_d
/_sc{7 -1 roll{setcachedevice}{pop pop pop pop pop pop}ifelse}_d
/_e{exec}_d
/FontName /BitstreamVeraSans-Roman def
/PaintType 0 def
/FontMatrix[.001 0 0 .001 0 0]def
/FontBBox[-183 -236 1287 928]def
/FontType 3 def
/Encoding [ /space /parenleft /parenright /period /zero /one /two /three /four /five /six /eight /A /a /c /d /e /f /g /i /k /l /m /n /o /p /r /s /t /u /v /y ] def
/FontInfo 10 dict dup begin
/FamilyName (Bitstream Vera Sans) def
/FullName (Bitstream Vera Sans) def
/Notice (Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Bitstream Vera is a trademark of Bitstream, Inc.) def
/Weight (Roman) def
/Version (Release 1.10) def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -213 def
/UnderlineThickness 143 def
end readonly def
/CharStrings 32 dict dup begin
/space{318 0 0 0 0 0 _sc
}_d
/parenleft{390 0 86 -131 310 759 _sc
310 759 _m
266 683 234 609 213 536 _c
191 463 181 389 181 314 _c
181 238 191 164 213 91 _c
234 17 266 -56 310 -131 _c
232 -131 _l
183 -54 146 20 122 94 _c
98 168 86 241 86 314 _c
86 386 98 459 122 533 _c
146 607 182 682 232 759 _c
310 759 _l
_cl}_d
/parenright{390 0 80 -131 304 759 _sc
80 759 _m
158 759 _l
206 682 243 607 267 533 _c
291 459 304 386 304 314 _c
304 241 291 168 267 94 _c
243 20 206 -54 158 -131 _c
80 -131 _l
123 -56 155 17 177 91 _c
198 164 209 238 209 314 _c
209 389 198 463 177 536 _c
155 609 123 683 80 759 _c
_cl}_d
/period{318 0 107 0 210 124 _sc
107 124 _m
210 124 _l
210 0 _l
107 0 _l
107 124 _l
_cl}_d
/zero{636 0 66 -13 570 742 _sc
318 664 _m
267 664 229 639 203 589 _c
177 539 165 464 165 364 _c
165 264 177 189 203 139 _c
229 89 267 64 318 64 _c
369 64 407 89 433 139 _c
458 189 471 264 471 364 _c
471 464 458 539 433 589 _c
407 639 369 664 318 664 _c
318 742 _m
399 742 461 709 505 645 _c
548 580 570 486 570 364 _c
570 241 548 147 505 83 _c
461 19 399 -13 318 -13 _c
236 -13 173 19 130 83 _c
87 147 66 241 66 364 _c
66 486 87 580 130 645 _c
173 709 236 742 318 742 _c
_cl}_d
/one{636 0 110 0 544 729 _sc
124 83 _m
285 83 _l
285 639 _l
110 604 _l
110 694 _l
284 729 _l
383 729 _l
383 83 _l
544 83 _l
544 0 _l
124 0 _l
124 83 _l
_cl}_d
/two{{636 0 73 0 536 742 _sc
192 83 _m
536 83 _l
536 0 _l
73 0 _l
73 83 _l
110 121 161 173 226 239 _c
290 304 331 346 348 365 _c
380 400 402 430 414 455 _c
426 479 433 504 433 528 _c
433 566 419 598 392 622 _c
365 646 330 659 286 659 _c
255 659 222 653 188 643 _c
154 632 117 616 78 594 _c
78 694 _l
118 710 155 722 189 730 _c
223 738 255 742 284 742 _c
}_e{359 742 419 723 464 685 _c
509 647 532 597 532 534 _c
532 504 526 475 515 449 _c
504 422 484 390 454 354 _c
446 344 420 317 376 272 _c
332 227 271 164 192 83 _c
_cl}_e}_d
/three{{636 0 76 -13 556 742 _sc
406 393 _m
453 383 490 362 516 330 _c
542 298 556 258 556 212 _c
556 140 531 84 482 45 _c
432 6 362 -13 271 -13 _c
240 -13 208 -10 176 -4 _c
144 1 110 10 76 22 _c
76 117 _l
103 101 133 89 166 81 _c
198 73 232 69 268 69 _c
330 69 377 81 409 105 _c
441 129 458 165 458 212 _c
458 254 443 288 413 312 _c
383 336 341 349 287 349 _c
}_e{202 349 _l
202 430 _l
291 430 _l
339 430 376 439 402 459 _c
428 478 441 506 441 543 _c
441 580 427 609 401 629 _c
374 649 336 659 287 659 _c
260 659 231 656 200 650 _c
169 644 135 635 98 623 _c
98 711 _l
135 721 170 729 203 734 _c
235 739 266 742 296 742 _c
370 742 429 725 473 691 _c
517 657 539 611 539 553 _c
539 513 527 479 504 451 _c
481 423 448 403 406 393 _c
_cl}_e}_d
/four{636 0 49 0 580 729 _sc
378 643 _m
129 254 _l
378 254 _l
378 643 _l
352 729 _m
476 729 _l
476 254 _l
580 254 _l
580 172 _l
476 172 _l
476 0 _l
378 0 _l
378 172 _l
49 172 _l
49 267 _l
352 729 _l
_cl}_d
/five{{636 0 77 -13 549 729 _sc
108 729 _m
495 729 _l
495 646 _l
198 646 _l
198 467 _l
212 472 227 476 241 478 _c
255 480 270 482 284 482 _c
365 482 429 459 477 415 _c
525 370 549 310 549 234 _c
549 155 524 94 475 51 _c
426 8 357 -13 269 -13 _c
238 -13 207 -10 175 -6 _c
143 -1 111 6 77 17 _c
77 116 _l
106 100 136 88 168 80 _c
199 72 232 69 267 69 _c
}_e{323 69 368 83 401 113 _c
433 143 450 183 450 234 _c
450 284 433 324 401 354 _c
368 384 323 399 267 399 _c
241 399 214 396 188 390 _c
162 384 135 375 108 363 _c
108 729 _l
_cl}_e}_d
/six{{636 0 70 -13 573 742 _sc
330 404 _m
286 404 251 388 225 358 _c
199 328 186 286 186 234 _c
186 181 199 139 225 109 _c
251 79 286 64 330 64 _c
374 64 409 79 435 109 _c
461 139 474 181 474 234 _c
474 286 461 328 435 358 _c
409 388 374 404 330 404 _c
526 713 _m
526 623 _l
501 635 476 644 451 650 _c
425 656 400 659 376 659 _c
310 659 260 637 226 593 _c
}_e{192 549 172 482 168 394 _c
187 422 211 444 240 459 _c
269 474 301 482 336 482 _c
409 482 467 459 509 415 _c
551 371 573 310 573 234 _c
573 159 550 99 506 54 _c
462 9 403 -13 330 -13 _c
246 -13 181 19 137 83 _c
92 147 70 241 70 364 _c
70 479 97 571 152 639 _c
206 707 280 742 372 742 _c
396 742 421 739 447 735 _c
472 730 498 723 526 713 _c
_cl}_e}_d
/eight{{636 0 68 -13 568 742 _sc
318 346 _m
271 346 234 333 207 308 _c
180 283 167 249 167 205 _c
167 161 180 126 207 101 _c
234 76 271 64 318 64 _c
364 64 401 76 428 102 _c
455 127 469 161 469 205 _c
469 249 455 283 429 308 _c
402 333 365 346 318 346 _c
219 388 _m
177 398 144 418 120 447 _c
96 476 85 511 85 553 _c
85 611 105 657 147 691 _c
188 725 245 742 318 742 _c
}_e{390 742 447 725 489 691 _c
530 657 551 611 551 553 _c
551 511 539 476 515 447 _c
491 418 459 398 417 388 _c
464 377 501 355 528 323 _c
554 291 568 251 568 205 _c
568 134 546 80 503 43 _c
459 5 398 -13 318 -13 _c
237 -13 175 5 132 43 _c
89 80 68 134 68 205 _c
68 251 81 291 108 323 _c
134 355 171 377 219 388 _c
183 544 _m
183 506 194 476 218 455 _c
}_e{242 434 275 424 318 424 _c
360 424 393 434 417 455 _c
441 476 453 506 453 544 _c
453 582 441 611 417 632 _c
393 653 360 664 318 664 _c
275 664 242 653 218 632 _c
194 611 183 582 183 544 _c
_cl}_e}_d
/A{684 0 8 0 676 729 _sc
342 632 _m
208 269 _l
476 269 _l
342 632 _l
286 729 _m
398 729 _l
676 0 _l
573 0 _l
507 187 _l
178 187 _l
112 0 _l
8 0 _l
286 729 _l
_cl}_d
/a{{613 0 60 -13 522 560 _sc
343 275 _m
270 275 220 266 192 250 _c
164 233 150 205 150 165 _c
150 133 160 107 181 89 _c
202 70 231 61 267 61 _c
317 61 357 78 387 114 _c
417 149 432 196 432 255 _c
432 275 _l
343 275 _l
522 312 _m
522 0 _l
432 0 _l
432 83 _l
411 49 385 25 355 10 _c
325 -5 287 -13 243 -13 _c
187 -13 142 2 109 33 _c
76 64 60 106 60 159 _c
}_e{60 220 80 266 122 298 _c
163 329 224 345 306 345 _c
432 345 _l
432 354 _l
432 395 418 427 391 450 _c
364 472 326 484 277 484 _c
245 484 215 480 185 472 _c
155 464 127 453 100 439 _c
100 522 _l
132 534 164 544 195 550 _c
226 556 256 560 286 560 _c
365 560 424 539 463 498 _c
502 457 522 395 522 312 _c
_cl}_e}_d
/c{{550 0 55 -13 488 560 _sc
488 526 _m
488 442 _l
462 456 437 466 411 473 _c
385 480 360 484 334 484 _c
276 484 230 465 198 428 _c
166 391 150 339 150 273 _c
150 206 166 154 198 117 _c
230 80 276 62 334 62 _c
360 62 385 65 411 72 _c
437 79 462 90 488 104 _c
488 21 _l
462 9 436 0 410 -5 _c
383 -10 354 -13 324 -13 _c
242 -13 176 12 128 64 _c
}_e{79 115 55 185 55 273 _c
55 362 79 432 128 483 _c
177 534 244 560 330 560 _c
358 560 385 557 411 551 _c
437 545 463 537 488 526 _c
_cl}_e}_d
/d{{635 0 55 -13 544 760 _sc
454 464 _m
454 760 _l
544 760 _l
544 0 _l
454 0 _l
454 82 _l
435 49 411 25 382 10 _c
353 -5 319 -13 279 -13 _c
213 -13 159 13 117 65 _c
75 117 55 187 55 273 _c
55 359 75 428 117 481 _c
159 533 213 560 279 560 _c
319 560 353 552 382 536 _c
411 520 435 496 454 464 _c
148 273 _m
148 207 161 155 188 117 _c
215 79 253 61 301 61 _c
}_e{348 61 385 79 413 117 _c
440 155 454 207 454 273 _c
454 339 440 390 413 428 _c
385 466 348 485 301 485 _c
253 485 215 466 188 428 _c
161 390 148 339 148 273 _c
_cl}_e}_d
/e{{615 0 55 -13 562 560 _sc
562 296 _m
562 252 _l
149 252 _l
153 190 171 142 205 110 _c
238 78 284 62 344 62 _c
378 62 412 66 444 74 _c
476 82 509 95 541 113 _c
541 28 _l
509 14 476 3 442 -3 _c
408 -9 373 -13 339 -13 _c
251 -13 182 12 131 62 _c
80 112 55 181 55 268 _c
55 357 79 428 127 481 _c
175 533 241 560 323 560 _c
397 560 455 536 498 489 _c
}_e{540 441 562 377 562 296 _c
472 322 _m
471 371 457 410 431 440 _c
404 469 368 484 324 484 _c
274 484 234 469 204 441 _c
174 413 156 373 152 322 _c
472 322 _l
_cl}_e}_d
/f{352 0 23 0 371 760 _sc
371 760 _m
371 685 _l
285 685 _l
253 685 230 678 218 665 _c
205 652 199 629 199 595 _c
199 547 _l
347 547 _l
347 477 _l
199 477 _l
199 0 _l
109 0 _l
109 477 _l
23 477 _l
23 547 _l
109 547 _l
109 585 _l
109 645 123 690 151 718 _c
179 746 224 760 286 760 _c
371 760 _l
_cl}_d
/g{{635 0 55 -207 544 560 _sc
454 280 _m
454 344 440 395 414 431 _c
387 467 349 485 301 485 _c
253 485 215 467 188 431 _c
161 395 148 344 148 280 _c
148 215 161 165 188 129 _c
215 93 253 75 301 75 _c
349 75 387 93 414 129 _c
440 165 454 215 454 280 _c
544 68 _m
544 -24 523 -93 482 -139 _c
440 -184 377 -207 292 -207 _c
260 -207 231 -204 203 -200 _c
175 -195 147 -188 121 -178 _c
}_e{121 -91 _l
147 -105 173 -115 199 -122 _c
225 -129 251 -133 278 -133 _c
336 -133 380 -117 410 -87 _c
439 -56 454 -10 454 52 _c
454 96 _l
435 64 411 40 382 24 _c
353 8 319 0 279 0 _c
211 0 157 25 116 76 _c
75 127 55 195 55 280 _c
55 364 75 432 116 483 _c
157 534 211 560 279 560 _c
319 560 353 552 382 536 _c
411 520 435 496 454 464 _c
454 547 _l
544 547 _l
}_e{544 68 _l
_cl}_e}_d
/i{278 0 94 0 184 760 _sc
94 547 _m
184 547 _l
184 0 _l
94 0 _l
94 547 _l
94 760 _m
184 760 _l
184 646 _l
94 646 _l
94 760 _l
_cl}_d
/k{579 0 91 0 576 760 _sc
91 760 _m
181 760 _l
181 311 _l
449 547 _l
564 547 _l
274 291 _l
576 0 _l
459 0 _l
181 267 _l
181 0 _l
91 0 _l
91 760 _l
_cl}_d
/l{278 0 94 0 184 760 _sc
94 760 _m
184 760 _l
184 0 _l
94 0 _l
94 760 _l
_cl}_d
/m{{974 0 91 0 889 560 _sc
520 442 _m
542 482 569 511 600 531 _c
631 550 668 560 711 560 _c
767 560 811 540 842 500 _c
873 460 889 403 889 330 _c
889 0 _l
799 0 _l
799 327 _l
799 379 789 418 771 444 _c
752 469 724 482 686 482 _c
639 482 602 466 575 435 _c
548 404 535 362 535 309 _c
535 0 _l
445 0 _l
445 327 _l
445 379 435 418 417 444 _c
398 469 369 482 331 482 _c
}_e{285 482 248 466 221 435 _c
194 404 181 362 181 309 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
201 495 226 520 255 536 _c
283 552 317 560 357 560 _c
397 560 430 550 458 530 _c
486 510 506 480 520 442 _c
_cl}_e}_d
/n{634 0 91 0 549 560 _sc
549 330 _m
549 0 _l
459 0 _l
459 327 _l
459 379 448 417 428 443 _c
408 469 378 482 338 482 _c
289 482 251 466 223 435 _c
195 404 181 362 181 309 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
202 494 227 519 257 535 _c
286 551 320 560 358 560 _c
420 560 468 540 500 501 _c
532 462 549 405 549 330 _c
_cl}_d
/o{612 0 55 -13 557 560 _sc
306 484 _m
258 484 220 465 192 427 _c
164 389 150 338 150 273 _c
150 207 163 156 191 118 _c
219 80 257 62 306 62 _c
354 62 392 80 420 118 _c
448 156 462 207 462 273 _c
462 337 448 389 420 427 _c
392 465 354 484 306 484 _c
306 560 _m
384 560 445 534 490 484 _c
534 433 557 363 557 273 _c
557 183 534 113 490 63 _c
445 12 384 -13 306 -13 _c
227 -13 165 12 121 63 _c
77 113 55 183 55 273 _c
55 363 77 433 121 484 _c
165 534 227 560 306 560 _c
_cl}_d
/p{{635 0 91 -207 580 560 _sc
181 82 _m
181 -207 _l
91 -207 _l
91 547 _l
181 547 _l
181 464 _l
199 496 223 520 252 536 _c
281 552 316 560 356 560 _c
422 560 476 533 518 481 _c
559 428 580 359 580 273 _c
580 187 559 117 518 65 _c
476 13 422 -13 356 -13 _c
316 -13 281 -5 252 10 _c
223 25 199 49 181 82 _c
487 273 _m
487 339 473 390 446 428 _c
418 466 381 485 334 485 _c
}_e{286 485 249 466 222 428 _c
194 390 181 339 181 273 _c
181 207 194 155 222 117 _c
249 79 286 61 334 61 _c
381 61 418 79 446 117 _c
473 155 487 207 487 273 _c
_cl}_e}_d
/r{411 0 91 0 411 560 _sc
411 463 _m
401 469 390 473 378 476 _c
366 478 353 480 339 480 _c
288 480 249 463 222 430 _c
194 397 181 350 181 288 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
199 495 224 520 254 536 _c
284 552 321 560 365 560 _c
371 560 378 559 386 559 _c
393 558 401 557 411 555 _c
411 463 _l
_cl}_d
/s{{521 0 54 -13 472 560 _sc
443 531 _m
443 446 _l
417 458 391 468 364 475 _c
336 481 308 485 279 485 _c
234 485 200 478 178 464 _c
156 450 145 430 145 403 _c
145 382 153 366 169 354 _c
185 342 217 330 265 320 _c
296 313 _l
360 299 405 279 432 255 _c
458 230 472 195 472 151 _c
472 100 452 60 412 31 _c
372 1 316 -13 246 -13 _c
216 -13 186 -10 154 -5 _c
}_e{122 0 89 8 54 20 _c
54 113 _l
87 95 120 82 152 74 _c
184 65 216 61 248 61 _c
290 61 323 68 346 82 _c
368 96 380 117 380 144 _c
380 168 371 187 355 200 _c
339 213 303 226 247 238 _c
216 245 _l
160 257 119 275 95 299 _c
70 323 58 356 58 399 _c
58 450 76 490 112 518 _c
148 546 200 560 268 560 _c
301 560 332 557 362 552 _c
391 547 418 540 443 531 _c
}_e{_cl}_e}_d
/t{392 0 27 0 368 702 _sc
183 702 _m
183 547 _l
368 547 _l
368 477 _l
183 477 _l
183 180 _l
183 135 189 106 201 94 _c
213 81 238 75 276 75 _c
368 75 _l
368 0 _l
276 0 _l
206 0 158 13 132 39 _c
106 65 93 112 93 180 _c
93 477 _l
27 477 _l
27 547 _l
93 547 _l
93 702 _l
183 702 _l
_cl}_d
/u{634 0 85 -13 543 547 _sc
85 216 _m
85 547 _l
175 547 _l
175 219 _l
175 167 185 129 205 103 _c
225 77 255 64 296 64 _c
344 64 383 79 411 110 _c
439 141 453 183 453 237 _c
453 547 _l
543 547 _l
543 0 _l
453 0 _l
453 84 _l
431 50 405 26 377 10 _c
348 -5 315 -13 277 -13 _c
214 -13 166 6 134 45 _c
101 83 85 140 85 216 _c
_cl}_d
/v{592 0 30 0 562 547 _sc
30 547 _m
125 547 _l
296 88 _l
467 547 _l
562 547 _l
357 0 _l
235 0 _l
30 547 _l
_cl}_d
/y{592 0 30 -207 562 547 _sc
322 -50 _m
296 -114 271 -157 247 -177 _c
223 -197 191 -207 151 -207 _c
79 -207 _l
79 -132 _l
132 -132 _l
156 -132 175 -126 189 -114 _c
203 -102 218 -75 235 -31 _c
251 9 _l
30 547 _l
125 547 _l
296 119 _l
467 547 _l
562 547 _l
322 -50 _l
_cl}_d
end readonly def

/BuildGlyph
 {exch begin
 CharStrings exch
 2 copy known not{pop /.notdef}if
 true 3 1 roll get exec
 end}_d

/BuildChar {
 1 index /Encoding get exch get
 1 index /BuildGlyph get exec
}_d

FontName currentdict end definefont pop
end
%%EndProlog
%%Page: 1 1
mpldict begin
18 180 translate
576 432 0 0 clipbox
100000 setmiterlimit
gsave
0 0 m
576 0 l
576 432 l
0 432 l
cl
1.000 setgray
fill
grestore
gsave
72 43.2 m
518.4 43.2 l
518.4 388.8 l
72 388.8 l
cl
1.000 setgray
fill
grestore
1.000 setlinewidth
1 setlinejoin
2 setlinecap
[] 0 setdash
0.000 0.000 1.000 setrgbcolor
gsave
446.4 345.6 72 43.2 clipbox
77.58 293.574302 m
88.74 136.77867 l
99.9 84.00108 l
111.06 81.386212 l
122.22 123.184241 l
133.38 257.542523 l
144.54 385.876961 l
155.7 247.238524 l
166.86 118.420698 l
178.02 72.073495 l
189.18 71.554719 l
200.34 113.499 l
211.5 243.711221 l
222.66 370.379833 l
233.82 238.108665 l
244.98 109.383584 l
256.14 65.959407 l
267.3 65.770332 l
278.46 109.17478 l
289.62 237.943043 l
300.78 362.723005 l
311.94 232.868113 l
323.1 106.959962 l
334.26 66.152497 l
345.42 67.156475 l
356.58 113.282483 l
367.74 240.07118 l
378.9 360.576984 l
390.06 233.852594 l
401.22 107.801164 l
412.38 65.53467 l
423.54 66.973403 l
434.7 113.395021 l
445.86 237.590455 l
457.02 362.359988 l
468.18 233.824946 l
479.34 105.583253 l
490.5 63.039034 l
stroke
grestore
0.500 setlinewidth
0 setlinecap
0.000 setgray
gsave
446.4 345.6 72 43.2 clipbox
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 -3 m
0.795609 -3 1.55874 -2.683901 2.12132 -2.12132 c
2.683901 -1.55874 3 -0.795609 3 0 c
3 0.795609 2.683901 1.55874 2.12132 2.12132 c
1.55874 2.683901 0.795609 3 0 3 c
-0.795609 3 -1.55874 2.683901 -2.12132 2.12132 c
-2.683901 1.55874 -3 0.795609 -3 0 c
-3 -0.795609 -2.683901 -1.55874 -2.12132 -2.12132 c
-1.55874 -2.683901 -0.795609 -3 0 -3 c
cl

gsave
0.000 0.000 1.000 setrgbcolor
fill
grestore
stroke
grestore
} bind def
77.58 293.574 o
88.74 136.779 o
99.9 84.0011 o
111.06 81.3862 o
122.22 123.184 o
133.38 257.543 o
144.54 385.877 o
155.7 247.239 o
166.86 118.421 o
178.02 72.0735 o
189.18 71.5547 o
200.34 113.499 o
211.5 243.711 o
222.66 370.38 o
233.82 238.109 o
244.98 109.384 o
256.14 65.9594 o
267.3 65.7703 o
278.46 109.175 o
289.62 237.943 o
300.78 362.723 o
311.94 232.868 o
323.1 106.96 o
334.26 66.1525 o
345.42 67.1565 o
356.58 113.282 o
367.74 240.071 o
378.9 360.577 o
390.06 233.853 o
401.22 107.801 o
412.38 65.5347 o
423.54 66.9734 o
434.7 113.395 o
445.86 237.59 o
457.02 362.36 o
468.18 233.825 o
479.34 105.583 o
490.5 63.039 o
grestore
1.000 setlinewidth
0 setlinejoin
2 setlinecap
gsave
72 388.8 m
518.4 388.8 l
stroke
grestore
gsave
518.4 43.2 m
518.4 388.8 l
stroke
grestore
gsave
72 43.2 m
518.4 43.2 l
stroke
grestore
gsave
72 43.2 m
72 388.8 l
stroke
grestore
0.500 setlinewidth
1 setlinejoin
0 setlinecap
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 388.8 o
grestore
/BitstreamVeraSans-Roman findfont
12.000 scalefont
setfont
gsave
68.179688 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
127.8 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
127.8 388.8 o
grestore
gsave
123.979687 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
183.6 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
183.6 388.8 o
grestore
gsave
175.959375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
239.4 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
239.4 388.8 o
grestore
gsave
231.759375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
295.2 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
295.2 388.8 o
grestore
gsave
287.559375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /two glyphshow
7.634766 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
351 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
351 388.8 o
grestore
gsave
343.359375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /two glyphshow
7.634766 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
406.8 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
406.8 388.8 o
grestore
gsave
399.159375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /three glyphshow
7.634766 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
462.6 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
462.6 388.8 o
grestore
gsave
454.959375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /three glyphshow
7.634766 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 388.8 o
grestore
gsave
510.759375 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /four glyphshow
7.634766 0.000000 m /zero glyphshow
grestore
gsave
195.403125 13.450000 translate
0.000000 rotate
0.000000 0.000000 m /A glyphshow
8.208984 0.000000 m /s glyphshow
14.460938 0.000000 m /s glyphshow
20.712891 0.000000 m /u glyphshow
28.318359 0.000000 m /m glyphshow
40.007812 0.000000 m /e glyphshow
47.390625 0.000000 m /d glyphshow
55.007812 0.000000 m /space glyphshow
58.822266 0.000000 m /p glyphshow
66.439453 0.000000 m /e glyphshow
73.822266 0.000000 m /r glyphshow
78.755859 0.000000 m /i glyphshow
82.089844 0.000000 m /o glyphshow
89.431641 0.000000 m /d glyphshow
97.048828 0.000000 m /space glyphshow
100.863281 0.000000 m /o glyphshow
108.205078 0.000000 m /f glyphshow
112.429688 0.000000 m /space glyphshow
116.244141 0.000000 m /d glyphshow
123.861328 0.000000 m /a glyphshow
131.214844 0.000000 m /t glyphshow
135.919922 0.000000 m /a glyphshow
143.273438 0.000000 m /space glyphshow
147.087891 0.000000 m /parenleft glyphshow
151.769531 0.000000 m /i glyphshow
155.103516 0.000000 m /n glyphshow
162.708984 0.000000 m /space glyphshow
166.523438 0.000000 m /d glyphshow
174.140625 0.000000 m /a glyphshow
181.494141 0.000000 m /y glyphshow
188.595703 0.000000 m /s glyphshow
194.847656 0.000000 m /parenright glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 43.2 o
grestore
gsave
41.265625 39.887500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /one glyphshow
19.083984 0.000000 m /four glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 81.6 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 81.6 o
grestore
gsave
41.265625 78.287500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /one glyphshow
19.083984 0.000000 m /six glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 120 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 120 o
grestore
gsave
41.265625 116.687500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /one glyphshow
19.083984 0.000000 m /eight glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 158.4 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 158.4 o
grestore
gsave
41.265625 155.087500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 196.8 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 196.8 o
grestore
gsave
41.265625 193.487500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /two glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 235.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 235.2 o
grestore
gsave
41.265625 231.887500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /four glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 273.6 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 273.6 o
grestore
gsave
41.265625 270.287500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /six glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 312 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 312 o
grestore
gsave
41.265625 308.687500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /eight glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 350.4 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 350.4 o
grestore
gsave
41.265625 347.087500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /three glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 388.8 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 388.8 o
grestore
gsave
41.265625 385.487500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /three glyphshow
19.083984 0.000000 m /two glyphshow
grestore
gsave
33.765625 101.859375 translate
90.000000 rotate
0.000000 0.000000 m /A glyphshow
8.208984 0.000000 m /v glyphshow
15.310547 0.000000 m /e glyphshow
22.693359 0.000000 m /r glyphshow
27.626953 0.000000 m /a glyphshow
34.980469 0.000000 m /g glyphshow
42.597656 0.000000 m /e glyphshow
49.980469 0.000000 m /space glyphshow
53.794922 0.000000 m /a glyphshow
61.148438 0.000000 m /u glyphshow
68.753906 0.000000 m /t glyphshow
73.458984 0.000000 m /o glyphshow
80.800781 0.000000 m /c glyphshow
87.398438 0.000000 m /o glyphshow
94.740234 0.000000 m /r glyphshow
99.673828 0.000000 m /e glyphshow
107.056641 0.000000 m /l glyphshow
110.390625 0.000000 m /l glyphshow
113.724609 0.000000 m /a glyphshow
121.078125 0.000000 m /t glyphshow
125.783203 0.000000 m /i glyphshow
129.117188 0.000000 m /o glyphshow
136.458984 0.000000 m /n glyphshow
144.064453 0.000000 m /space glyphshow
147.878906 0.000000 m /o glyphshow
155.220703 0.000000 m /v glyphshow
162.322266 0.000000 m /e glyphshow
169.705078 0.000000 m /r glyphshow
174.638672 0.000000 m /space glyphshow
178.453125 0.000000 m /f glyphshow
182.677734 0.000000 m /u glyphshow
190.283203 0.000000 m /l glyphshow
193.617188 0.000000 m /l glyphshow
196.951172 0.000000 m /space glyphshow
200.765625 0.000000 m /l glyphshow
204.099609 0.000000 m /i glyphshow
207.433594 0.000000 m /n glyphshow
215.039062 0.000000 m /k glyphshow
221.988281 0.000000 m /s glyphshow
grestore

end
showpage
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 2368 x @beginspecial
18 @llx 180 @lly 594 @urx 612 @ury 3496 @rwi @setspecial
%%BeginDocument: ./Figures/Autocorrelation_Full_Links_hourly.ps
%!PS-Adobe-3.0
%%Title: /home/vaibhav/Dropbox/Traffic_New/Project_Report_New/Figures/figure_1.ps
%%Creator: matplotlib version 1.5.1, http://matplotlib.org/
%%CreationDate: Thu Oct 27 11:31:53 2016
%%Orientation: portrait
%%DocumentPaperSizes: letter
%%BoundingBox: 18 180 594 612
%%Pages: 1
%%EndComments
%%BeginProlog
/mpldict 8 dict def
mpldict begin
/m { moveto } bind def
/l { lineto } bind def
/r { rlineto } bind def
/c { curveto } bind def
/cl { closepath } bind def
/box {
m
1 index 0 r
0 exch r
neg 0 r
cl
} bind def
/clipbox {
box
clip
newpath
} bind def
%!PS-Adobe-3.0 Resource-Font
%%Title: Bitstream Vera Sans
%%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%%Creator: Converted from TrueType to type 3 by PPR
25 dict begin
/_d{bind def}bind def
/_m{moveto}_d
/_l{lineto}_d
/_cl{closepath eofill}_d
/_c{curveto}_d
/_sc{7 -1 roll{setcachedevice}{pop pop pop pop pop pop}ifelse}_d
/_e{exec}_d
/FontName /BitstreamVeraSans-Roman def
/PaintType 0 def
/FontMatrix[.001 0 0 .001 0 0]def
/FontBBox[-183 -236 1287 928]def
/FontType 3 def
/Encoding [ /space /parenleft /parenright /period /zero /one /two /three /four /five /six /seven /eight /A /a /c /d /e /f /g /h /i /k /l /m /n /o /p /r /s /t /u /v /minus ] def
/FontInfo 10 dict dup begin
/FamilyName (Bitstream Vera Sans) def
/FullName (Bitstream Vera Sans) def
/Notice (Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Bitstream Vera is a trademark of Bitstream, Inc.) def
/Weight (Roman) def
/Version (Release 1.10) def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -213 def
/UnderlineThickness 143 def
end readonly def
/CharStrings 34 dict dup begin
/space{318 0 0 0 0 0 _sc
}_d
/parenleft{390 0 86 -131 310 759 _sc
310 759 _m
266 683 234 609 213 536 _c
191 463 181 389 181 314 _c
181 238 191 164 213 91 _c
234 17 266 -56 310 -131 _c
232 -131 _l
183 -54 146 20 122 94 _c
98 168 86 241 86 314 _c
86 386 98 459 122 533 _c
146 607 182 682 232 759 _c
310 759 _l
_cl}_d
/parenright{390 0 80 -131 304 759 _sc
80 759 _m
158 759 _l
206 682 243 607 267 533 _c
291 459 304 386 304 314 _c
304 241 291 168 267 94 _c
243 20 206 -54 158 -131 _c
80 -131 _l
123 -56 155 17 177 91 _c
198 164 209 238 209 314 _c
209 389 198 463 177 536 _c
155 609 123 683 80 759 _c
_cl}_d
/period{318 0 107 0 210 124 _sc
107 124 _m
210 124 _l
210 0 _l
107 0 _l
107 124 _l
_cl}_d
/zero{636 0 66 -13 570 742 _sc
318 664 _m
267 664 229 639 203 589 _c
177 539 165 464 165 364 _c
165 264 177 189 203 139 _c
229 89 267 64 318 64 _c
369 64 407 89 433 139 _c
458 189 471 264 471 364 _c
471 464 458 539 433 589 _c
407 639 369 664 318 664 _c
318 742 _m
399 742 461 709 505 645 _c
548 580 570 486 570 364 _c
570 241 548 147 505 83 _c
461 19 399 -13 318 -13 _c
236 -13 173 19 130 83 _c
87 147 66 241 66 364 _c
66 486 87 580 130 645 _c
173 709 236 742 318 742 _c
_cl}_d
/one{636 0 110 0 544 729 _sc
124 83 _m
285 83 _l
285 639 _l
110 604 _l
110 694 _l
284 729 _l
383 729 _l
383 83 _l
544 83 _l
544 0 _l
124 0 _l
124 83 _l
_cl}_d
/two{{636 0 73 0 536 742 _sc
192 83 _m
536 83 _l
536 0 _l
73 0 _l
73 83 _l
110 121 161 173 226 239 _c
290 304 331 346 348 365 _c
380 400 402 430 414 455 _c
426 479 433 504 433 528 _c
433 566 419 598 392 622 _c
365 646 330 659 286 659 _c
255 659 222 653 188 643 _c
154 632 117 616 78 594 _c
78 694 _l
118 710 155 722 189 730 _c
223 738 255 742 284 742 _c
}_e{359 742 419 723 464 685 _c
509 647 532 597 532 534 _c
532 504 526 475 515 449 _c
504 422 484 390 454 354 _c
446 344 420 317 376 272 _c
332 227 271 164 192 83 _c
_cl}_e}_d
/three{{636 0 76 -13 556 742 _sc
406 393 _m
453 383 490 362 516 330 _c
542 298 556 258 556 212 _c
556 140 531 84 482 45 _c
432 6 362 -13 271 -13 _c
240 -13 208 -10 176 -4 _c
144 1 110 10 76 22 _c
76 117 _l
103 101 133 89 166 81 _c
198 73 232 69 268 69 _c
330 69 377 81 409 105 _c
441 129 458 165 458 212 _c
458 254 443 288 413 312 _c
383 336 341 349 287 349 _c
}_e{202 349 _l
202 430 _l
291 430 _l
339 430 376 439 402 459 _c
428 478 441 506 441 543 _c
441 580 427 609 401 629 _c
374 649 336 659 287 659 _c
260 659 231 656 200 650 _c
169 644 135 635 98 623 _c
98 711 _l
135 721 170 729 203 734 _c
235 739 266 742 296 742 _c
370 742 429 725 473 691 _c
517 657 539 611 539 553 _c
539 513 527 479 504 451 _c
481 423 448 403 406 393 _c
_cl}_e}_d
/four{636 0 49 0 580 729 _sc
378 643 _m
129 254 _l
378 254 _l
378 643 _l
352 729 _m
476 729 _l
476 254 _l
580 254 _l
580 172 _l
476 172 _l
476 0 _l
378 0 _l
378 172 _l
49 172 _l
49 267 _l
352 729 _l
_cl}_d
/five{{636 0 77 -13 549 729 _sc
108 729 _m
495 729 _l
495 646 _l
198 646 _l
198 467 _l
212 472 227 476 241 478 _c
255 480 270 482 284 482 _c
365 482 429 459 477 415 _c
525 370 549 310 549 234 _c
549 155 524 94 475 51 _c
426 8 357 -13 269 -13 _c
238 -13 207 -10 175 -6 _c
143 -1 111 6 77 17 _c
77 116 _l
106 100 136 88 168 80 _c
199 72 232 69 267 69 _c
}_e{323 69 368 83 401 113 _c
433 143 450 183 450 234 _c
450 284 433 324 401 354 _c
368 384 323 399 267 399 _c
241 399 214 396 188 390 _c
162 384 135 375 108 363 _c
108 729 _l
_cl}_e}_d
/six{{636 0 70 -13 573 742 _sc
330 404 _m
286 404 251 388 225 358 _c
199 328 186 286 186 234 _c
186 181 199 139 225 109 _c
251 79 286 64 330 64 _c
374 64 409 79 435 109 _c
461 139 474 181 474 234 _c
474 286 461 328 435 358 _c
409 388 374 404 330 404 _c
526 713 _m
526 623 _l
501 635 476 644 451 650 _c
425 656 400 659 376 659 _c
310 659 260 637 226 593 _c
}_e{192 549 172 482 168 394 _c
187 422 211 444 240 459 _c
269 474 301 482 336 482 _c
409 482 467 459 509 415 _c
551 371 573 310 573 234 _c
573 159 550 99 506 54 _c
462 9 403 -13 330 -13 _c
246 -13 181 19 137 83 _c
92 147 70 241 70 364 _c
70 479 97 571 152 639 _c
206 707 280 742 372 742 _c
396 742 421 739 447 735 _c
472 730 498 723 526 713 _c
_cl}_e}_d
/seven{636 0 82 0 551 729 _sc
82 729 _m
551 729 _l
551 687 _l
286 0 _l
183 0 _l
432 646 _l
82 646 _l
82 729 _l
_cl}_d
/eight{{636 0 68 -13 568 742 _sc
318 346 _m
271 346 234 333 207 308 _c
180 283 167 249 167 205 _c
167 161 180 126 207 101 _c
234 76 271 64 318 64 _c
364 64 401 76 428 102 _c
455 127 469 161 469 205 _c
469 249 455 283 429 308 _c
402 333 365 346 318 346 _c
219 388 _m
177 398 144 418 120 447 _c
96 476 85 511 85 553 _c
85 611 105 657 147 691 _c
188 725 245 742 318 742 _c
}_e{390 742 447 725 489 691 _c
530 657 551 611 551 553 _c
551 511 539 476 515 447 _c
491 418 459 398 417 388 _c
464 377 501 355 528 323 _c
554 291 568 251 568 205 _c
568 134 546 80 503 43 _c
459 5 398 -13 318 -13 _c
237 -13 175 5 132 43 _c
89 80 68 134 68 205 _c
68 251 81 291 108 323 _c
134 355 171 377 219 388 _c
183 544 _m
183 506 194 476 218 455 _c
}_e{242 434 275 424 318 424 _c
360 424 393 434 417 455 _c
441 476 453 506 453 544 _c
453 582 441 611 417 632 _c
393 653 360 664 318 664 _c
275 664 242 653 218 632 _c
194 611 183 582 183 544 _c
_cl}_e}_d
/A{684 0 8 0 676 729 _sc
342 632 _m
208 269 _l
476 269 _l
342 632 _l
286 729 _m
398 729 _l
676 0 _l
573 0 _l
507 187 _l
178 187 _l
112 0 _l
8 0 _l
286 729 _l
_cl}_d
/a{{613 0 60 -13 522 560 _sc
343 275 _m
270 275 220 266 192 250 _c
164 233 150 205 150 165 _c
150 133 160 107 181 89 _c
202 70 231 61 267 61 _c
317 61 357 78 387 114 _c
417 149 432 196 432 255 _c
432 275 _l
343 275 _l
522 312 _m
522 0 _l
432 0 _l
432 83 _l
411 49 385 25 355 10 _c
325 -5 287 -13 243 -13 _c
187 -13 142 2 109 33 _c
76 64 60 106 60 159 _c
}_e{60 220 80 266 122 298 _c
163 329 224 345 306 345 _c
432 345 _l
432 354 _l
432 395 418 427 391 450 _c
364 472 326 484 277 484 _c
245 484 215 480 185 472 _c
155 464 127 453 100 439 _c
100 522 _l
132 534 164 544 195 550 _c
226 556 256 560 286 560 _c
365 560 424 539 463 498 _c
502 457 522 395 522 312 _c
_cl}_e}_d
/c{{550 0 55 -13 488 560 _sc
488 526 _m
488 442 _l
462 456 437 466 411 473 _c
385 480 360 484 334 484 _c
276 484 230 465 198 428 _c
166 391 150 339 150 273 _c
150 206 166 154 198 117 _c
230 80 276 62 334 62 _c
360 62 385 65 411 72 _c
437 79 462 90 488 104 _c
488 21 _l
462 9 436 0 410 -5 _c
383 -10 354 -13 324 -13 _c
242 -13 176 12 128 64 _c
}_e{79 115 55 185 55 273 _c
55 362 79 432 128 483 _c
177 534 244 560 330 560 _c
358 560 385 557 411 551 _c
437 545 463 537 488 526 _c
_cl}_e}_d
/d{{635 0 55 -13 544 760 _sc
454 464 _m
454 760 _l
544 760 _l
544 0 _l
454 0 _l
454 82 _l
435 49 411 25 382 10 _c
353 -5 319 -13 279 -13 _c
213 -13 159 13 117 65 _c
75 117 55 187 55 273 _c
55 359 75 428 117 481 _c
159 533 213 560 279 560 _c
319 560 353 552 382 536 _c
411 520 435 496 454 464 _c
148 273 _m
148 207 161 155 188 117 _c
215 79 253 61 301 61 _c
}_e{348 61 385 79 413 117 _c
440 155 454 207 454 273 _c
454 339 440 390 413 428 _c
385 466 348 485 301 485 _c
253 485 215 466 188 428 _c
161 390 148 339 148 273 _c
_cl}_e}_d
/e{{615 0 55 -13 562 560 _sc
562 296 _m
562 252 _l
149 252 _l
153 190 171 142 205 110 _c
238 78 284 62 344 62 _c
378 62 412 66 444 74 _c
476 82 509 95 541 113 _c
541 28 _l
509 14 476 3 442 -3 _c
408 -9 373 -13 339 -13 _c
251 -13 182 12 131 62 _c
80 112 55 181 55 268 _c
55 357 79 428 127 481 _c
175 533 241 560 323 560 _c
397 560 455 536 498 489 _c
}_e{540 441 562 377 562 296 _c
472 322 _m
471 371 457 410 431 440 _c
404 469 368 484 324 484 _c
274 484 234 469 204 441 _c
174 413 156 373 152 322 _c
472 322 _l
_cl}_e}_d
/f{352 0 23 0 371 760 _sc
371 760 _m
371 685 _l
285 685 _l
253 685 230 678 218 665 _c
205 652 199 629 199 595 _c
199 547 _l
347 547 _l
347 477 _l
199 477 _l
199 0 _l
109 0 _l
109 477 _l
23 477 _l
23 547 _l
109 547 _l
109 585 _l
109 645 123 690 151 718 _c
179 746 224 760 286 760 _c
371 760 _l
_cl}_d
/g{{635 0 55 -207 544 560 _sc
454 280 _m
454 344 440 395 414 431 _c
387 467 349 485 301 485 _c
253 485 215 467 188 431 _c
161 395 148 344 148 280 _c
148 215 161 165 188 129 _c
215 93 253 75 301 75 _c
349 75 387 93 414 129 _c
440 165 454 215 454 280 _c
544 68 _m
544 -24 523 -93 482 -139 _c
440 -184 377 -207 292 -207 _c
260 -207 231 -204 203 -200 _c
175 -195 147 -188 121 -178 _c
}_e{121 -91 _l
147 -105 173 -115 199 -122 _c
225 -129 251 -133 278 -133 _c
336 -133 380 -117 410 -87 _c
439 -56 454 -10 454 52 _c
454 96 _l
435 64 411 40 382 24 _c
353 8 319 0 279 0 _c
211 0 157 25 116 76 _c
75 127 55 195 55 280 _c
55 364 75 432 116 483 _c
157 534 211 560 279 560 _c
319 560 353 552 382 536 _c
411 520 435 496 454 464 _c
454 547 _l
544 547 _l
}_e{544 68 _l
_cl}_e}_d
/h{634 0 91 0 549 760 _sc
549 330 _m
549 0 _l
459 0 _l
459 327 _l
459 379 448 417 428 443 _c
408 469 378 482 338 482 _c
289 482 251 466 223 435 _c
195 404 181 362 181 309 _c
181 0 _l
91 0 _l
91 760 _l
181 760 _l
181 462 _l
202 494 227 519 257 535 _c
286 551 320 560 358 560 _c
420 560 468 540 500 501 _c
532 462 549 405 549 330 _c
_cl}_d
/i{278 0 94 0 184 760 _sc
94 547 _m
184 547 _l
184 0 _l
94 0 _l
94 547 _l
94 760 _m
184 760 _l
184 646 _l
94 646 _l
94 760 _l
_cl}_d
/k{579 0 91 0 576 760 _sc
91 760 _m
181 760 _l
181 311 _l
449 547 _l
564 547 _l
274 291 _l
576 0 _l
459 0 _l
181 267 _l
181 0 _l
91 0 _l
91 760 _l
_cl}_d
/l{278 0 94 0 184 760 _sc
94 760 _m
184 760 _l
184 0 _l
94 0 _l
94 760 _l
_cl}_d
/m{{974 0 91 0 889 560 _sc
520 442 _m
542 482 569 511 600 531 _c
631 550 668 560 711 560 _c
767 560 811 540 842 500 _c
873 460 889 403 889 330 _c
889 0 _l
799 0 _l
799 327 _l
799 379 789 418 771 444 _c
752 469 724 482 686 482 _c
639 482 602 466 575 435 _c
548 404 535 362 535 309 _c
535 0 _l
445 0 _l
445 327 _l
445 379 435 418 417 444 _c
398 469 369 482 331 482 _c
}_e{285 482 248 466 221 435 _c
194 404 181 362 181 309 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
201 495 226 520 255 536 _c
283 552 317 560 357 560 _c
397 560 430 550 458 530 _c
486 510 506 480 520 442 _c
_cl}_e}_d
/n{634 0 91 0 549 560 _sc
549 330 _m
549 0 _l
459 0 _l
459 327 _l
459 379 448 417 428 443 _c
408 469 378 482 338 482 _c
289 482 251 466 223 435 _c
195 404 181 362 181 309 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
202 494 227 519 257 535 _c
286 551 320 560 358 560 _c
420 560 468 540 500 501 _c
532 462 549 405 549 330 _c
_cl}_d
/o{612 0 55 -13 557 560 _sc
306 484 _m
258 484 220 465 192 427 _c
164 389 150 338 150 273 _c
150 207 163 156 191 118 _c
219 80 257 62 306 62 _c
354 62 392 80 420 118 _c
448 156 462 207 462 273 _c
462 337 448 389 420 427 _c
392 465 354 484 306 484 _c
306 560 _m
384 560 445 534 490 484 _c
534 433 557 363 557 273 _c
557 183 534 113 490 63 _c
445 12 384 -13 306 -13 _c
227 -13 165 12 121 63 _c
77 113 55 183 55 273 _c
55 363 77 433 121 484 _c
165 534 227 560 306 560 _c
_cl}_d
/p{{635 0 91 -207 580 560 _sc
181 82 _m
181 -207 _l
91 -207 _l
91 547 _l
181 547 _l
181 464 _l
199 496 223 520 252 536 _c
281 552 316 560 356 560 _c
422 560 476 533 518 481 _c
559 428 580 359 580 273 _c
580 187 559 117 518 65 _c
476 13 422 -13 356 -13 _c
316 -13 281 -5 252 10 _c
223 25 199 49 181 82 _c
487 273 _m
487 339 473 390 446 428 _c
418 466 381 485 334 485 _c
}_e{286 485 249 466 222 428 _c
194 390 181 339 181 273 _c
181 207 194 155 222 117 _c
249 79 286 61 334 61 _c
381 61 418 79 446 117 _c
473 155 487 207 487 273 _c
_cl}_e}_d
/r{411 0 91 0 411 560 _sc
411 463 _m
401 469 390 473 378 476 _c
366 478 353 480 339 480 _c
288 480 249 463 222 430 _c
194 397 181 350 181 288 _c
181 0 _l
91 0 _l
91 547 _l
181 547 _l
181 462 _l
199 495 224 520 254 536 _c
284 552 321 560 365 560 _c
371 560 378 559 386 559 _c
393 558 401 557 411 555 _c
411 463 _l
_cl}_d
/s{{521 0 54 -13 472 560 _sc
443 531 _m
443 446 _l
417 458 391 468 364 475 _c
336 481 308 485 279 485 _c
234 485 200 478 178 464 _c
156 450 145 430 145 403 _c
145 382 153 366 169 354 _c
185 342 217 330 265 320 _c
296 313 _l
360 299 405 279 432 255 _c
458 230 472 195 472 151 _c
472 100 452 60 412 31 _c
372 1 316 -13 246 -13 _c
216 -13 186 -10 154 -5 _c
}_e{122 0 89 8 54 20 _c
54 113 _l
87 95 120 82 152 74 _c
184 65 216 61 248 61 _c
290 61 323 68 346 82 _c
368 96 380 117 380 144 _c
380 168 371 187 355 200 _c
339 213 303 226 247 238 _c
216 245 _l
160 257 119 275 95 299 _c
70 323 58 356 58 399 _c
58 450 76 490 112 518 _c
148 546 200 560 268 560 _c
301 560 332 557 362 552 _c
391 547 418 540 443 531 _c
}_e{_cl}_e}_d
/t{392 0 27 0 368 702 _sc
183 702 _m
183 547 _l
368 547 _l
368 477 _l
183 477 _l
183 180 _l
183 135 189 106 201 94 _c
213 81 238 75 276 75 _c
368 75 _l
368 0 _l
276 0 _l
206 0 158 13 132 39 _c
106 65 93 112 93 180 _c
93 477 _l
27 477 _l
27 547 _l
93 547 _l
93 702 _l
183 702 _l
_cl}_d
/u{634 0 85 -13 543 547 _sc
85 216 _m
85 547 _l
175 547 _l
175 219 _l
175 167 185 129 205 103 _c
225 77 255 64 296 64 _c
344 64 383 79 411 110 _c
439 141 453 183 453 237 _c
453 547 _l
543 547 _l
543 0 _l
453 0 _l
453 84 _l
431 50 405 26 377 10 _c
348 -5 315 -13 277 -13 _c
214 -13 166 6 134 45 _c
101 83 85 140 85 216 _c
_cl}_d
/v{592 0 30 0 562 547 _sc
30 547 _m
125 547 _l
296 88 _l
467 547 _l
562 547 _l
357 0 _l
235 0 _l
30 547 _l
_cl}_d
/minus{838 0 106 272 732 355 _sc
106 355 _m
732 355 _l
732 272 _l
106 272 _l
106 355 _l
_cl}_d
end readonly def

/BuildGlyph
 {exch begin
 CharStrings exch
 2 copy known not{pop /.notdef}if
 true 3 1 roll get exec
 end}_d

/BuildChar {
 1 index /Encoding get exch get
 1 index /BuildGlyph get exec
}_d

FontName currentdict end definefont pop
end
%%EndProlog
%%Page: 1 1
mpldict begin
18 180 translate
576 432 0 0 clipbox
100000 setmiterlimit
gsave
0 0 m
576 0 l
576 432 l
0 432 l
cl
1.000 setgray
fill
grestore
gsave
72 43.2 m
518.4 43.2 l
518.4 388.8 l
72 388.8 l
cl
1.000 setgray
fill
grestore
1.000 setlinewidth
1 setlinejoin
2 setlinecap
[] 0 setdash
0.000 0.000 1.000 setrgbcolor
gsave
446.4 345.6 72 43.2 clipbox
72 69.506098 m
109.2 103.139671 l
146.4 149.765503 l
183.6 207.610459 l
220.8 271.010627 l
258 332.418502 l
295.2 364.590784 l
332.4 332.62586 l
369.6 272.045307 l
406.8 208.484186 l
444 150.349122 l
481.2 102.763818 l
518.4 68.617959 l
stroke
grestore
0.500 setlinewidth
0 setlinecap
0.000 setgray
gsave
446.4 345.6 72 43.2 clipbox
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 -3 m
0.795609 -3 1.55874 -2.683901 2.12132 -2.12132 c
2.683901 -1.55874 3 -0.795609 3 0 c
3 0.795609 2.683901 1.55874 2.12132 2.12132 c
1.55874 2.683901 0.795609 3 0 3 c
-0.795609 3 -1.55874 2.683901 -2.12132 2.12132 c
-2.683901 1.55874 -3 0.795609 -3 0 c
-3 -0.795609 -2.683901 -1.55874 -2.12132 -2.12132 c
-1.55874 -2.683901 -0.795609 -3 0 -3 c
cl

gsave
0.000 0.000 1.000 setrgbcolor
fill
grestore
stroke
grestore
} bind def
72 69.5061 o
109.2 103.14 o
146.4 149.766 o
183.6 207.61 o
220.8 271.011 o
258 332.419 o
295.2 364.591 o
332.4 332.626 o
369.6 272.045 o
406.8 208.484 o
444 150.349 o
481.2 102.764 o
518.4 68.618 o
grestore
1.000 setlinewidth
0 setlinejoin
2 setlinecap
gsave
72 388.8 m
518.4 388.8 l
stroke
grestore
gsave
518.4 43.2 m
518.4 388.8 l
stroke
grestore
gsave
72 43.2 m
518.4 43.2 l
stroke
grestore
gsave
72 43.2 m
72 388.8 l
stroke
grestore
0.500 setlinewidth
1 setlinejoin
0 setlinecap
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 388.8 o
grestore
/BitstreamVeraSans-Roman findfont
12.000 scalefont
setfont
gsave
60.539062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /six glyphshow
15.269531 0.000000 m /two glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
146.4 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
146.4 388.8 o
grestore
gsave
134.939062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /six glyphshow
15.269531 0.000000 m /four glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
220.8 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
220.8 388.8 o
grestore
gsave
209.339062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /six glyphshow
15.269531 0.000000 m /six glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
295.2 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
295.2 388.8 o
grestore
gsave
283.739062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /six glyphshow
15.269531 0.000000 m /eight glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
369.6 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
369.6 388.8 o
grestore
gsave
358.139062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /seven glyphshow
15.269531 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
444 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
444 388.8 o
grestore
gsave
432.539062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /seven glyphshow
15.269531 0.000000 m /two glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
0 -4 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 388.8 o
grestore
gsave
506.939062 30.075000 translate
0.000000 rotate
0.000000 0.000000 m /one glyphshow
7.634766 0.000000 m /seven glyphshow
15.269531 0.000000 m /four glyphshow
grestore
gsave
192.700000 13.450000 translate
0.000000 rotate
0.000000 0.000000 m /A glyphshow
8.208984 0.000000 m /s glyphshow
14.460938 0.000000 m /s glyphshow
20.712891 0.000000 m /u glyphshow
28.318359 0.000000 m /m glyphshow
40.007812 0.000000 m /e glyphshow
47.390625 0.000000 m /d glyphshow
55.007812 0.000000 m /space glyphshow
58.822266 0.000000 m /p glyphshow
66.439453 0.000000 m /e glyphshow
73.822266 0.000000 m /r glyphshow
78.755859 0.000000 m /i glyphshow
82.089844 0.000000 m /o glyphshow
89.431641 0.000000 m /d glyphshow
97.048828 0.000000 m /space glyphshow
100.863281 0.000000 m /o glyphshow
108.205078 0.000000 m /f glyphshow
112.429688 0.000000 m /space glyphshow
116.244141 0.000000 m /d glyphshow
123.861328 0.000000 m /a glyphshow
131.214844 0.000000 m /t glyphshow
135.919922 0.000000 m /a glyphshow
143.273438 0.000000 m /space glyphshow
147.087891 0.000000 m /parenleft glyphshow
151.769531 0.000000 m /i glyphshow
155.103516 0.000000 m /n glyphshow
162.708984 0.000000 m /space glyphshow
166.523438 0.000000 m /h glyphshow
174.128906 0.000000 m /o glyphshow
181.470703 0.000000 m /u glyphshow
189.076172 0.000000 m /r glyphshow
194.009766 0.000000 m /s glyphshow
200.261719 0.000000 m /parenright glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 43.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 43.2 o
grestore
gsave
31.203125 39.887500 translate
0.000000 rotate
0.000000 0.000000 m /minus glyphshow
10.054688 0.000000 m /zero glyphshow
17.689453 0.000000 m /period glyphshow
21.503906 0.000000 m /one glyphshow
29.138672 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 81.6 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 81.6 o
grestore
gsave
31.203125 78.287500 translate
0.000000 rotate
0.000000 0.000000 m /minus glyphshow
10.054688 0.000000 m /zero glyphshow
17.689453 0.000000 m /period glyphshow
21.503906 0.000000 m /zero glyphshow
29.138672 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 120 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 120 o
grestore
gsave
41.265625 116.687500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /zero glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 158.4 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 158.4 o
grestore
gsave
41.265625 155.087500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /zero glyphshow
19.083984 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 196.8 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 196.8 o
grestore
gsave
41.265625 193.487500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /one glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 235.2 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 235.2 o
grestore
gsave
41.265625 231.887500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /one glyphshow
19.083984 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 273.6 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 273.6 o
grestore
gsave
41.265625 270.287500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 312 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 312 o
grestore
gsave
41.265625 308.687500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /two glyphshow
19.083984 0.000000 m /five glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 350.4 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 350.4 o
grestore
gsave
41.265625 347.087500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /three glyphshow
19.083984 0.000000 m /zero glyphshow
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
72 388.8 o
grestore
gsave
/o {
gsave
newpath
translate
0.5 setlinewidth
1 setlinejoin
0 setlinecap
0 0 m
-4 0 l

gsave
0.000 setgray
fill
grestore
stroke
grestore
} bind def
518.4 388.8 o
grestore
gsave
41.265625 385.487500 translate
0.000000 rotate
0.000000 0.000000 m /zero glyphshow
7.634766 0.000000 m /period glyphshow
11.449219 0.000000 m /three glyphshow
19.083984 0.000000 m /five glyphshow
grestore
gsave
23.703125 101.859375 translate
90.000000 rotate
0.000000 0.000000 m /A glyphshow
8.208984 0.000000 m /v glyphshow
15.310547 0.000000 m /e glyphshow
22.693359 0.000000 m /r glyphshow
27.626953 0.000000 m /a glyphshow
34.980469 0.000000 m /g glyphshow
42.597656 0.000000 m /e glyphshow
49.980469 0.000000 m /space glyphshow
53.794922 0.000000 m /a glyphshow
61.148438 0.000000 m /u glyphshow
68.753906 0.000000 m /t glyphshow
73.458984 0.000000 m /o glyphshow
80.800781 0.000000 m /c glyphshow
87.398438 0.000000 m /o glyphshow
94.740234 0.000000 m /r glyphshow
99.673828 0.000000 m /e glyphshow
107.056641 0.000000 m /l glyphshow
110.390625 0.000000 m /l glyphshow
113.724609 0.000000 m /a glyphshow
121.078125 0.000000 m /t glyphshow
125.783203 0.000000 m /i glyphshow
129.117188 0.000000 m /o glyphshow
136.458984 0.000000 m /n glyphshow
144.064453 0.000000 m /space glyphshow
147.878906 0.000000 m /o glyphshow
155.220703 0.000000 m /v glyphshow
162.322266 0.000000 m /e glyphshow
169.705078 0.000000 m /r glyphshow
174.638672 0.000000 m /space glyphshow
178.453125 0.000000 m /f glyphshow
182.677734 0.000000 m /u glyphshow
190.283203 0.000000 m /l glyphshow
193.617188 0.000000 m /l glyphshow
196.951172 0.000000 m /space glyphshow
200.765625 0.000000 m /l glyphshow
204.099609 0.000000 m /i glyphshow
207.433594 0.000000 m /n glyphshow
215.039062 0.000000 m /k glyphshow
221.988281 0.000000 m /s glyphshow
grestore

end
showpage
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 1918 5251
a Fe(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 324 548 a Ff(2)161 b(In)53 b(Phase1.p)l(y)324
767 y Fe(W)-8 b(e)22 b(group)g(the)h(functions)g(for)e(running)i
(Sparse)g(Non-negativ)m(e)f(Matrix)h(F)-8 b(actorization)324
887 y(under)38 b Fc(\014nd)p 773 887 30 4 v 36 w(signatures)p
Fe(.)60 b(Using)39 b(the)f(campus)h(cluster,)i(w)m(e)d(run)h(SNMF)f
(with)g Fa(\014)6 b Fe(,)39 b Fa(\021)t Fe(,)324 1008
y(and)k(rank)g(?????)74 b(Running)43 b(SNMF\(tra)m(v)m(eltimes,)48
b(rank=50,)e Fa(\014)k Fe(=)45 b(0)p Fa(:)p Fe(1,)g Fa(\021)k
Fe(=)c(0)p Fa(:)p Fe(1,)324 1128 y(threshold=0)p Fa(:)p
Fe(01\))k(giv)m(es)h(error)e(of)g(39.890\045.)90 b(Running)49
b(SNMF\(trips,)54 b(rank=50,)324 1249 y Fa(\014)33 b
Fe(=)28 b(0)p Fa(:)p Fe(1,)k Fa(\021)f Fe(=)d(0)p Fa(:)p
Fe(1,)k(threshold=0)p Fa(:)p Fe(01\))h(giv)m(es)h(error)e(of)h
(28.666\045.)p 0 TeXcolorgray 1918 5251 a(3)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
